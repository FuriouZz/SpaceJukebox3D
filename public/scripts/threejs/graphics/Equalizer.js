var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Equalizer = (function(_super) {
  __extends(Equalizer, _super);

  Equalizer.prototype.center = null;

  Equalizer.prototype._values = null;

  Equalizer.prototype._newValues = null;

  Equalizer.prototype._oldValues = null;

  Equalizer.prototype._time = 1;

  Equalizer.prototype.material = null;

  Equalizer.prototype.lines = null;

  Equalizer.prototype.isGenerated = false;

  Equalizer.prototype.maxLength = 0;

  Equalizer.prototype.minLength = 0;

  Equalizer.prototype.radius = 0;

  Equalizer.prototype.interpolationTime = 0;

  Equalizer.prototype.color = 0xFFFFFF;

  function Equalizer(point, opts) {
    var defaults;
    if (opts == null) {
      opts = {};
    }
    this.random = __bind(this.random, this);
    Equalizer.__super__.constructor.apply(this, arguments);
    defaults = {
      maxLength: 200,
      minLength: 50,
      radius: 250,
      interpolationTime: 150,
      color: 0xFFFFFF
    };
    opts = HELPERS.merge(defaults, opts);
    this.minLength = opts.minLength;
    this.maxLength = opts.maxLength;
    this.radius = opts.radius;
    this.interpolationTime = opts.interpolationTime;
    this.color = opts.color;
    this.center = point;
    this._values = [];
    this._oldValues = [];
    this._newValues = [];
    this.generate();
  }

  Equalizer.prototype.setValues = function(values) {
    var length, newValues, value, _i, _len;
    newValues = [];
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      value = values[_i];
      length = this.minLength + parseFloat(value) * (this.maxLength - this.minLength);
      newValues.push(length);
    }
    this._newValues = newValues;
    return this.resetInterpolation();
  };

  Equalizer.prototype.generate = function() {
    this.mute();
    this.material = new THREE.LineBasicMaterial({
      color: this.color,
      linewidth: 2
    });
    this.lines = [];
    this.update(0);
    return this.updateGeometries(true);
  };

  Equalizer.prototype.update = function(delta) {
    var diff, i, t, _i, _ref;
    this._time += delta;
    t = this._time / this.interpolationTime;
    if (t > 1) {
      return;
    }
    for (i = _i = 0, _ref = this._newValues.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      diff = this._oldValues[i] - this._newValues[i];
      this._values[i] = this._oldValues[i] - t * diff;
    }
    return this.updateGeometries();
  };

  Equalizer.prototype.updateGeometries = function(create) {
    var angle, from, geometry, i, length, line, radius, to, _i, _ref, _results;
    if (create == null) {
      create = false;
    }
    _results = [];
    for (i = _i = 0, _ref = this._values.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      angle = Math.PI * 2 * i / this._values.length;
      length = this._values[i];
      radius = 250;
      from = this.calculate(this.center, angle, radius - length * .5);
      to = this.calculate(this.center, angle, radius + length * .5);
      if (typeof this.lines[i] === 'undefined') {
        geometry = new THREE.Geometry();
        geometry.vertices.push(from, to, from);
        line = new THREE.Line(geometry, this.material);
        this.lines.push(line);
        _results.push(this.add(line));
      } else {
        line = this.lines[i];
        line.geometry.vertices[0] = from;
        line.geometry.vertices[1] = to;
        line.geometry.vertices[2] = from;
        _results.push(line.geometry.verticesNeedUpdate = true);
      }
    }
    return _results;
  };

  Equalizer.prototype.random = function(setValues) {
    var i, values, _i;
    if (setValues == null) {
      setValues = true;
    }
    values = [];
    for (i = _i = 0; _i <= 255; i = ++_i) {
      values[i] = Math.random();
    }
    if (setValues) {
      this.setValues(values);
    }
    return values;
  };

  Equalizer.prototype.mute = function(setValues) {
    var i, values, _i;
    if (setValues == null) {
      setValues = true;
    }
    values = [];
    for (i = _i = 0; _i <= 255; i = ++_i) {
      values[i] = 0;
    }
    if (setValues) {
      return this.setValues(values);
    }
  };

  Equalizer.prototype.resetInterpolation = function() {
    var i, _i, _ref, _ref1, _results;
    this._time = 0;
    this._oldValues = this._values;
    if (this._newValues.length > this._oldValues.length) {
      _results = [];
      for (i = _i = _ref = this._oldValues.length, _ref1 = this._newValues.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this._oldValues[i] = 0);
      }
      return _results;
    }
  };

  Equalizer.prototype.calculate = function(point, angle, length) {
    var x, y;
    x = point.x + Math.sin(angle) * length;
    y = point.y + Math.cos(angle) * length;
    return new THREE.Vector3(x, y, point.z);
  };

  return Equalizer;

})(THREE.Group);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRocmVlanMvZ3JhcGhpY3MvRXF1YWxpemVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztpU0FBQTs7QUFBQSxLQUFXLENBQUM7QUFFViw4QkFBQSxDQUFBOztBQUFBLHNCQUFBLE1BQUEsR0FBWSxJQUFaLENBQUE7O0FBQUEsc0JBRUEsT0FBQSxHQUFZLElBRlosQ0FBQTs7QUFBQSxzQkFHQSxVQUFBLEdBQVksSUFIWixDQUFBOztBQUFBLHNCQUlBLFVBQUEsR0FBWSxJQUpaLENBQUE7O0FBQUEsc0JBTUEsS0FBQSxHQUFZLENBTlosQ0FBQTs7QUFBQSxzQkFTQSxRQUFBLEdBQVksSUFUWixDQUFBOztBQUFBLHNCQVVBLEtBQUEsR0FBWSxJQVZaLENBQUE7O0FBQUEsc0JBV0EsV0FBQSxHQUFhLEtBWGIsQ0FBQTs7QUFBQSxzQkFjQSxTQUFBLEdBQW1CLENBZG5CLENBQUE7O0FBQUEsc0JBZUEsU0FBQSxHQUFtQixDQWZuQixDQUFBOztBQUFBLHNCQWdCQSxNQUFBLEdBQW1CLENBaEJuQixDQUFBOztBQUFBLHNCQWlCQSxpQkFBQSxHQUFtQixDQWpCbkIsQ0FBQTs7QUFBQSxzQkFrQkEsS0FBQSxHQUFtQixRQWxCbkIsQ0FBQTs7QUFvQmEsRUFBQSxtQkFBQyxLQUFELEVBQVEsSUFBUixHQUFBO0FBQ1gsUUFBQSxRQUFBOztNQURtQixPQUFLO0tBQ3hCO0FBQUEsMkNBQUEsQ0FBQTtBQUFBLElBQUEsNENBQUEsU0FBQSxDQUFBLENBQUE7QUFBQSxJQUdBLFFBQUEsR0FDRTtBQUFBLE1BQUEsU0FBQSxFQUFtQixHQUFuQjtBQUFBLE1BQ0EsU0FBQSxFQUFtQixFQURuQjtBQUFBLE1BRUEsTUFBQSxFQUFtQixHQUZuQjtBQUFBLE1BR0EsaUJBQUEsRUFBbUIsR0FIbkI7QUFBQSxNQUlBLEtBQUEsRUFBbUIsUUFKbkI7S0FKRixDQUFBO0FBQUEsSUFVQSxJQUFBLEdBQXFCLE9BQU8sQ0FBQyxLQUFSLENBQWMsUUFBZCxFQUF3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QUQsR0FBYyxJQUFDLENBQUEsT0FEZixDQUFBO0FBR0EsSUFBQSxJQUFHLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBWixHQUFxQixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQXBDO0FBQ0U7V0FBUyxzSkFBVCxHQUFBO0FBQ0Usc0JBQUEsSUFBQyxDQUFBLFVBQVcsQ0FBQSxDQUFBLENBQVosR0FBaUIsRUFBakIsQ0FERjtBQUFBO3NCQURGO0tBSmtCO0VBQUEsQ0E5R3BCLENBQUE7O0FBQUEsc0JBc0hBLFNBQUEsR0FBVyxTQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsTUFBZixHQUFBO0FBQ1QsUUFBQSxJQUFBO0FBQUEsSUFBQSxDQUFBLEdBQUksS0FBSyxDQUFDLENBQU4sR0FBVSxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFrQixNQUFoQyxDQUFBO0FBQUEsSUFDQSxDQUFBLEdBQUksS0FBSyxDQUFDLENBQU4sR0FBVSxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFrQixNQURoQyxDQUFBO0FBRUEsV0FBVyxJQUFBLEtBQUssQ0FBQyxPQUFOLENBQWMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixLQUFLLENBQUMsQ0FBMUIsQ0FBWCxDQUhTO0VBQUEsQ0F0SFgsQ0FBQTs7bUJBQUE7O0dBRjRCLEtBQUssQ0FBQyxNQUFwQyxDQUFBIiwiZmlsZSI6InRocmVlanMvZ3JhcGhpY3MvRXF1YWxpemVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU1BBQ0UuRXF1YWxpemVyIGV4dGVuZHMgVEhSRUUuR3JvdXBcblxuICBjZW50ZXI6ICAgICBudWxsXG5cbiAgX3ZhbHVlczogICAgbnVsbFxuICBfbmV3VmFsdWVzOiBudWxsXG4gIF9vbGRWYWx1ZXM6IG51bGxcblxuICBfdGltZTogICAgICAxXG5cbiAgIyBUSFJFRVxuICBtYXRlcmlhbDogICBudWxsXG4gIGxpbmVzOiAgICAgIG51bGxcbiAgaXNHZW5lcmF0ZWQ6IGZhbHNlXG5cbiAgIyBQYXJhbWV0ZXJzXG4gIG1heExlbmd0aDogICAgICAgICAwXG4gIG1pbkxlbmd0aDogICAgICAgICAwXG4gIHJhZGl1czogICAgICAgICAgICAwXG4gIGludGVycG9sYXRpb25UaW1lOiAwXG4gIGNvbG9yOiAgICAgICAgICAgICAweEZGRkZGRlxuXG4gIGNvbnN0cnVjdG9yOiAocG9pbnQsIG9wdHM9e30pLT5cbiAgICBzdXBlclxuXG4gICAgIyBTZXQgcGFyYW1ldGVyc1xuICAgIGRlZmF1bHRzID1cbiAgICAgIG1heExlbmd0aDogICAgICAgICAyMDBcbiAgICAgIG1pbkxlbmd0aDogICAgICAgICA1MFxuICAgICAgcmFkaXVzOiAgICAgICAgICAgIDI1MFxuICAgICAgaW50ZXJwb2xhdGlvblRpbWU6IDE1MFxuICAgICAgY29sb3I6ICAgICAgICAgICAgIDB4RkZGRkZGXG4gICAgXG4gICAgb3B0cyAgICAgICAgICAgICAgID0gSEVMUEVSUy5tZXJnZShkZWZhdWx0cywgb3B0cylcbiAgICBAbWluTGVuZ3RoICAgICAgICAgPSBvcHRzLm1pbkxlbmd0aFxuICAgIEBtYXhMZW5ndGggICAgICAgICA9IG9wdHMubWF4TGVuZ3RoXG4gICAgQHJhZGl1cyAgICAgICAgICAgID0gb3B0cy5yYWRpdXNcbiAgICBAaW50ZXJwb2xhdGlvblRpbWUgPSBvcHRzLmludGVycG9sYXRpb25UaW1lXG4gICAgQGNvbG9yICAgICAgICAgICAgID0gb3B0cy5jb2xvclxuXG4gICAgIyBTZXQgdmFsdWVzXG4gICAgQGNlbnRlciAgICAgPSBwb2ludFxuICAgIEBfdmFsdWVzICAgID0gW11cbiAgICBAX29sZFZhbHVlcyA9IFtdXG4gICAgQF9uZXdWYWx1ZXMgPSBbXVxuXG4gICAgQGdlbmVyYXRlKClcblxuICBzZXRWYWx1ZXM6ICh2YWx1ZXMpLT5cbiAgICBuZXdWYWx1ZXMgPSBbXVxuICAgIGZvciB2YWx1ZSBpbiB2YWx1ZXNcbiAgICAgIGxlbmd0aCA9IEBtaW5MZW5ndGggKyBwYXJzZUZsb2F0KHZhbHVlKSooQG1heExlbmd0aCAtIEBtaW5MZW5ndGgpXG4gICAgICBuZXdWYWx1ZXMucHVzaChsZW5ndGgpXG4gICAgQF9uZXdWYWx1ZXMgPSBuZXdWYWx1ZXNcbiAgICBAcmVzZXRJbnRlcnBvbGF0aW9uKCkgICAgXG5cbiAgZ2VuZXJhdGU6IC0+XG4gICAgQG11dGUoKVxuXG4gICAgQG1hdGVyaWFsICAgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogQGNvbG9yLCBsaW5ld2lkdGg6IDIgfSlcbiAgICBAbGluZXMgICAgICA9IFtdXG5cbiAgICBAdXBkYXRlKDApXG4gICAgQHVwZGF0ZUdlb21ldHJpZXModHJ1ZSlcblxuICB1cGRhdGU6IChkZWx0YSktPlxuICAgIEBfdGltZSArPSBkZWx0YVxuICAgIHQgPSBAX3RpbWUgLyBAaW50ZXJwb2xhdGlvblRpbWVcbiAgICByZXR1cm4gaWYgdCA+IDFcblxuICAgIGZvciBpIGluIFswLi4oQF9uZXdWYWx1ZXMubGVuZ3RoLTEpXVxuICAgICAgZGlmZiAgICAgICAgPSBAX29sZFZhbHVlc1tpXSAtIEBfbmV3VmFsdWVzW2ldXG4gICAgICBAX3ZhbHVlc1tpXSA9IEBfb2xkVmFsdWVzW2ldIC0gdCAqIGRpZmZcbiAgICBAdXBkYXRlR2VvbWV0cmllcygpIyBpZiBAaXNHZW5lcmF0ZWRcblxuICB1cGRhdGVHZW9tZXRyaWVzOiAoY3JlYXRlPWZhbHNlKS0+XG4gICAgZm9yIGkgaW4gWzAuLihAX3ZhbHVlcy5sZW5ndGgtMSldXG4gICAgICBhbmdsZSAgPSBNYXRoLlBJICogMiAqIGkgLyAoQF92YWx1ZXMubGVuZ3RoKVxuXG4gICAgICBsZW5ndGggPSBAX3ZhbHVlc1tpXVxuICAgICAgcmFkaXVzID0gMjUwXG5cbiAgICAgIGZyb20gPSBAY2FsY3VsYXRlKEBjZW50ZXIsIGFuZ2xlLCByYWRpdXMtbGVuZ3RoKi41KVxuICAgICAgdG8gICA9IEBjYWxjdWxhdGUoQGNlbnRlciwgYW5nbGUsIHJhZGl1cytsZW5ndGgqLjUpXG5cbiAgICAgIGlmIHR5cGVvZiBAbGluZXNbaV0gPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKVxuICAgICAgICBnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKGZyb20sIHRvLCBmcm9tKVxuXG4gICAgICAgIGxpbmUgPSBuZXcgVEhSRUUuTGluZShnZW9tZXRyeSwgQG1hdGVyaWFsKVxuICAgICAgICBAbGluZXMucHVzaChsaW5lKVxuICAgICAgICBAYWRkKGxpbmUpXG4gICAgICBlbHNlXG4gICAgICAgIGxpbmUgPSBAbGluZXNbaV1cbiAgICAgICAgbGluZS5nZW9tZXRyeS52ZXJ0aWNlc1swXSA9IGZyb21cbiAgICAgICAgbGluZS5nZW9tZXRyeS52ZXJ0aWNlc1sxXSA9IHRvXG4gICAgICAgIGxpbmUuZ2VvbWV0cnkudmVydGljZXNbMl0gPSBmcm9tXG4gICAgICAgIGxpbmUuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZVxuXG4gIHJhbmRvbTogKHNldFZhbHVlcz10cnVlKT0+XG4gICAgdmFsdWVzID0gW11cbiAgICBmb3IgaSBpbiBbMC4uMjU1XVxuICAgICAgdmFsdWVzW2ldID0gTWF0aC5yYW5kb20oKVxuICAgIEBzZXRWYWx1ZXModmFsdWVzKSBpZiBzZXRWYWx1ZXNcbiAgICByZXR1cm4gdmFsdWVzXG5cbiAgbXV0ZTogKHNldFZhbHVlcz10cnVlKS0+XG4gICAgdmFsdWVzID0gW11cbiAgICBmb3IgaSBpbiBbMC4uMjU1XVxuICAgICAgdmFsdWVzW2ldID0gMFxuICAgIEBzZXRWYWx1ZXModmFsdWVzKSBpZiBzZXRWYWx1ZXNcblxuICByZXNldEludGVycG9sYXRpb246IC0+XG4gICAgQF90aW1lID0gMFxuICAgIEBfb2xkVmFsdWVzID0gQF92YWx1ZXNcblxuICAgIGlmIEBfbmV3VmFsdWVzLmxlbmd0aCA+IEBfb2xkVmFsdWVzLmxlbmd0aFxuICAgICAgZm9yIGkgaW4gWyhAX29sZFZhbHVlcy5sZW5ndGgpLi4oQF9uZXdWYWx1ZXMubGVuZ3RoLTEpXVxuICAgICAgICBAX29sZFZhbHVlc1tpXSA9IDBcblxuICBjYWxjdWxhdGU6IChwb2ludCwgYW5nbGUsIGxlbmd0aCktPlxuICAgIHggPSBwb2ludC54ICsgTWF0aC5zaW4oYW5nbGUpICogbGVuZ3RoXG4gICAgeSA9IHBvaW50LnkgKyBNYXRoLmNvcyhhbmdsZSkgKiBsZW5ndGhcbiAgICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjMoeCwgeSwgcG9pbnQueilcblxuIl19