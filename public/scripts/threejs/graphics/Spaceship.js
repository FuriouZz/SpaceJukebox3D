var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Spaceship = (function(_super) {
  __extends(Spaceship, _super);

  Spaceship.prototype.state = null;

  Spaceship.IDLE = 'IDLE';

  Spaceship.LAUNCHED = 'LAUNCHED';

  Spaceship.IN_LOOP = 'IN_LOOP';

  Spaceship.ARRIVED = 'ARRIVED';

  function Spaceship(target, radius) {
    Spaceship.__super__.constructor.apply(this, arguments);
    this.target = target;
    this.radius = radius;
    this.angle = Math.random() * Math.PI * 2;
    this.setState(SPACE.Spaceship.IDLE);
    this.generate();
  }

  Spaceship.prototype.computePosition = function(point, angle, length) {
    var x, y;
    x = point.x + Math.sin(angle) * length;
    y = point.y + Math.cos(angle) * length;
    return new THREE.Vector3(x, y, point.z);
  };

  Spaceship.prototype.generate = function() {
    var distance, g, m, orbit, point, ship, time;
    g = new THREE.Geometry();
    g.vertices.push(new THREE.Vector3(0, -52.5, -10), new THREE.Vector3(-10, -67.5, 10), new THREE.Vector3(-50, -42.5, 10), new THREE.Vector3(0, 67.5, 10), new THREE.Vector3(+50, -42.5, 10), new THREE.Vector3(+10, -67.5, 10));
    g.faces.push(new THREE.Face3(0, 3, 1), new THREE.Face3(1, 2, 3), new THREE.Face3(3, 0, 5), new THREE.Face3(5, 4, 3));
    g.computeFaceNormals();
    m = new THREE.MeshLambertMaterial({
      color: 0x0088ff,
      side: THREE.DoubleSide
    });
    ship = new THREE.Mesh(g, m);
    ship.rotation.set(Math.PI * .5, Math.PI, Math.PI * .5);
    ship.castShadow = true;
    ship.receiveShadow = true;
    this.add(ship);
    this.position.set(250, 0, 250);
    point = new THREE.Vector2(this.target.x, this.target.z);
    orbit = new THREE.Vector2(this.position.x, this.position.z);
    distance = orbit.distanceTo(point);
    time = 0;
    return ship.update = (function(_this) {
      return function(delta) {
        var angle, p;
        time += delta;
        angle = time * .001;
        p = new THREE.Vector3(0, 0, 0);
        p.x = distance * Math.cos(angle);
        p.y = distance * Math.sin(angle);
        p.z = _this.position.z;
        _this.position.set(p.x, 0, p.y);
        return _this.lookAt(_this.target);
      };
    })(this);
  };

  Spaceship.prototype.setState = function(state) {
    this.state = state;
    switch (state) {
      case SPACE.Spaceship.IDLE:
        return SPACE.LOG('IDLE');
      case SPACE.Spaceship.LAUNCHED:
        return SPACE.LOG('LAUNCHED');
      case SPACE.Spaceship.IN_LOOP:
        return SPACE.LOG('IN_LOOP');
      case SPACE.Spaceship.ARRIVED:
        return SPACE.LOG('ARRIVED');
      default:
        return this.setState(SPACE.Spaceship.IDLE);
    }
  };

  Spaceship.prototype.forward = function() {};

  Spaceship.prototype.backward = function() {};

  Spaceship.prototype.move = function() {};

  Spaceship.prototype.update = function() {};

  Spaceship.prototype._updateInLoop = function() {};

  Spaceship.prototype._updateInLaunched = function() {};

  return Spaceship;

})(THREE.Group);

//# sourceMappingURL=data:application/json;base64,