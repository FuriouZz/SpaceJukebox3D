var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Spaceship = (function(_super) {
  __extends(Spaceship, _super);

  Spaceship.prototype.time = 0;

  Spaceship.prototype.ship = null;

  Spaceship.prototype.path = null;

  Spaceship.prototype.duration = 0;

  Spaceship.prototype.state = null;

  Spaceship.prototype.angle = 0;

  Spaceship.IDLE = 'IDLE';

  Spaceship.LAUNCHED = 'LAUNCHED';

  Spaceship.IN_LOOP = 'IN_LOOP';

  Spaceship.ARRIVED = 'ARRIVED';

  function Spaceship(target, radius) {
    Spaceship.__super__.constructor.apply(this, arguments);
    this.target = target;
    this.radius = radius;
    this.angle = Math.random() * Math.PI * 2;
    this.setState(SPACE.Spaceship.IDLE);
    this.generate();
  }

  Spaceship.prototype.computePosition = function(point, angle, length) {
    var x, y;
    x = point.x + Math.sin(angle) * length;
    y = point.y + Math.cos(angle) * length;
    return new THREE.Vector3(x, y, point.z);
  };

  Spaceship.prototype.generate = function() {
    var g, matrix;
    g = new THREE.Geometry();
    g.vertices.push(new THREE.Vector3(0, -52.5, -10), new THREE.Vector3(-10, -67.5, 10), new THREE.Vector3(-50, -42.5, 10), new THREE.Vector3(0, 67.5, 10), new THREE.Vector3(+50, -42.5, 10), new THREE.Vector3(+10, -67.5, 10));
    g.faces.push(new THREE.Face3(0, 3, 1), new THREE.Face3(1, 2, 3), new THREE.Face3(3, 0, 5), new THREE.Face3(5, 4, 3));
    g.computeFaceNormals();
    matrix = new THREE.Matrix4();
    matrix.makeRotationX(Math.PI * .5);
    g.applyMatrix(matrix);
    matrix.makeRotationZ(Math.PI);
    g.applyMatrix(matrix);
    this.ship = THREE.SceneUtils.createMultiMaterialObject(g, [
      new THREE.MeshBasicMaterial({
        color: 0x000000,
        opacity: 0.3,
        wireframe: true,
        transparent: true
      }), new THREE.MeshLambertMaterial({
        color: 0x0088ff,
        side: THREE.DoubleSide
      })
    ]);
    this.ship.castShadow = true;
    this.ship.receiveShadow = true;
    this.ship.scale.set(.1, .1, .1);
    return this.add(this.ship);
  };

  Spaceship.prototype.setState = function(state) {
    var v;
    this.state = state;
    switch (state) {
      case SPACE.Spaceship.IDLE:
        SPACE.LOG('IDLE');
        return this.path = null;
      case SPACE.Spaceship.LAUNCHED:
        SPACE.LOG('LAUNCHED');
        this.path = this._generateLaunchedPath();
        this.duration = 5 * 1000;
        v = this.path.getPoint(0);
        return this.ship.position.set(v.x, v.y, v.z);
      case SPACE.Spaceship.IN_LOOP:
        SPACE.LOG('IN_LOOP');
        this.path = this._generateInLoopPath();
        this.duration = 30 * 1000;
        v = this.path.getPoint(0);
        return this.ship.position.set(v.x, v.y, v.z);
      case SPACE.Spaceship.ARRIVED:
        SPACE.LOG('ARRIVED');
        return this.path = null;
      default:
        return this.setState(SPACE.Spaceship.IDLE);
    }
  };

  Spaceship.prototype.update = function(delta) {
    var t;
    if (this.state !== SPACE.Spaceship.IDLE && this.state !== SPACE.Spaceship.ARRIVED) {
      this.time += delta;
      t = this.time / this.duration;
      if (t >= 1) {
        this.time = 0;
        if (this.state === SPACE.Spaceship.LAUNCHED) {
          this.setState(SPACE.Spaceship.IN_LOOP);
        } else if (this.state === SPACE.Spaceship.IN_LOOP) {
          this.setState(SPACE.Spaceship.ARRIVED);
        }
        return;
      }
      return this._progress(t);
    }
  };

  Spaceship.prototype._progress = function(t) {
    var ahead, v;
    v = this.path.getPointAt(t);
    this.ship.position.set(v.x, v.y, v.z);
    ahead = (t + 10 / this.path.getLength()) % 1;
    v = this.path.getPointAt(ahead).multiplyScalar(1);
    this.ship.lookAt(v);
    if (this.state === SPACE.Spaceship.IN_LOOP) {
      return this.ship.rotation.set(this.ship.rotation.x, this.ship.rotation.y, 0);
    }
  };

  Spaceship.prototype._generateLaunchedPath = function() {
    var inloopPath, path, points;
    inloopPath = this._generateInLoopPath();
    points = [];
    points.push(new THREE.Vector3(50, -50, 600), new THREE.Vector3(125, 125, 125), new THREE.Vector3(125, 0, 125), inloopPath.getPointAt(0));
    path = _THREE.HermiteCurve(points);
    return path;
  };

  Spaceship.prototype._generateInLoopPath = function() {
    var path;
    path = new THREE.IncomingCurve(this.target, this.angle, 200);
    path.inverse = true;
    path.useGolden = true;
    return path;
  };

  return Spaceship;

})(THREE.Group);

//# sourceMappingURL=data:application/json;base64,