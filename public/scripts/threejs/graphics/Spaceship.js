var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Spaceship = (function(_super) {
  __extends(Spaceship, _super);

  Spaceship.prototype.state = null;

  Spaceship.IDLE = 'IDLE';

  Spaceship.LAUNCHED = 'LAUNCHED';

  Spaceship.IN_LOOP = 'IN_LOOP';

  Spaceship.ARRIVED = 'ARRIVED';

  function Spaceship(target, radius) {
    Spaceship.__super__.constructor.apply(this, arguments);
    this.target = target;
    this.radius = radius;
    this.angle = Math.random() * Math.PI * 2;
    this.setState(SPACE.Spaceship.IDLE);
    this.generate();
  }

  Spaceship.prototype.computePosition = function(point, angle, length) {
    var x, y;
    x = point.x + Math.sin(angle) * length;
    y = point.y + Math.cos(angle) * length;
    return new THREE.Vector3(x, y, point.z);
  };

  Spaceship.prototype.generate = function() {
    var g, m, matrix, ship, spline;
    g = new THREE.Geometry();
    g.vertices.push(new THREE.Vector3(0, -52.5, -10), new THREE.Vector3(-10, -67.5, 10), new THREE.Vector3(-50, -42.5, 10), new THREE.Vector3(0, 67.5, 10), new THREE.Vector3(+50, -42.5, 10), new THREE.Vector3(+10, -67.5, 10));
    g.faces.push(new THREE.Face3(0, 3, 1), new THREE.Face3(1, 2, 3), new THREE.Face3(3, 0, 5), new THREE.Face3(5, 4, 3));
    g.computeFaceNormals();
    m = new THREE.MeshLambertMaterial({
      color: 0x0088ff,
      side: THREE.DoubleSide
    });
    ship = new THREE.Mesh(g, m);
    matrix = new THREE.Matrix4();
    matrix.makeRotationX(Math.PI * .5);
    ship.geometry.applyMatrix(matrix);
    matrix.makeRotationZ(Math.PI);
    ship.geometry.applyMatrix(matrix);
    ship.castShadow = true;
    ship.receiveShadow = true;
    this.add(ship);
    
    THREE.Curves = {};


     THREE.Curves.GrannyKnot = THREE.Curve.create( function(){},

       function(t) {
          t = 2 * Math.PI * t;

          var x = -0.22 * Math.cos(t) - 1.28 * Math.sin(t) - 0.44 * Math.cos(3 * t) - 0.78 * Math.sin(3 * t);
          var y = -0.1 * Math.cos(2 * t) - 0.27 * Math.sin(2 * t) + 0.38 * Math.cos(4 * t) + 0.46 * Math.sin(4 * t);
          var z = 0.7 * Math.cos(3 * t) - 0.4 * Math.sin(3 * t);
          return new THREE.Vector3(x, y, z).multiplyScalar(20);
      }
    );
    ;
    spline = new THREE.Curves.GrannyKnot();
    g = new THREE.TubeGeometry(spline, 200, .25, 10, true);
    ship.scale.set(.5, .5, .5);
    return ship.update = (function(_this) {
      return function() {
        var looptime, pos, t, time;
        time = Date.now();
        looptime = 20 * 1000;
        t = (time % looptime) / looptime;
        pos = g.parameters.path.getPointAt(t);
        pos.multiplyScalar(10);
        ship.position.set(pos.x, pos.y, pos.z);
        pos.multiplyScalar(2);
        pos = g.parameters.path.getPointAt((t + 10 / g.parameters.path.getLength()) % 1).multiplyScalar(10);
        return ship.lookAt(pos);
      };
    })(this);
  };

  Spaceship.prototype.setState = function(state) {
    this.state = state;
    switch (state) {
      case SPACE.Spaceship.IDLE:
        return SPACE.LOG('IDLE');
      case SPACE.Spaceship.LAUNCHED:
        return SPACE.LOG('LAUNCHED');
      case SPACE.Spaceship.IN_LOOP:
        return SPACE.LOG('IN_LOOP');
      case SPACE.Spaceship.ARRIVED:
        return SPACE.LOG('ARRIVED');
      default:
        return this.setState(SPACE.Spaceship.IDLE);
    }
  };

  Spaceship.prototype.forward = function() {};

  Spaceship.prototype.backward = function() {};

  Spaceship.prototype.move = function() {};

  Spaceship.prototype.update = function() {};

  Spaceship.prototype._updateInLoop = function() {};

  Spaceship.prototype._updateInLaunched = function() {};

  return Spaceship;

})(THREE.Group);

//# sourceMappingURL=data:application/json;base64,