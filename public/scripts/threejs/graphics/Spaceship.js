var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Spaceship = (function(_super) {
  __extends(Spaceship, _super);

  Spaceship.prototype.time = 0;

  Spaceship.prototype.ship = null;

  Spaceship.prototype.path = null;

  Spaceship.prototype.duration = 0;

  Spaceship.prototype.state = null;

  Spaceship.prototype.angle = 0;

  Spaceship.prototype._cached = null;

  Spaceship.IDLE = 'IDLE';

  Spaceship.LAUNCHED = 'LAUNCHED';

  Spaceship.IN_LOOP = 'IN_LOOP';

  Spaceship.ARRIVED = 'ARRIVED';

  function Spaceship(target, radius) {
    Spaceship.__super__.constructor.apply(this, arguments);
    this.target = target;
    this.radius = radius;
    this.angle = Math.random() * Math.PI * 2;
    this.setState(SPACE.Spaceship.IDLE);
    this.setup();
    setTimeout((function(_this) {
      return function() {
        return _this.setState(SPACE.Spaceship.LAUNCHED);
      };
    })(this), 2000);
  }

  Spaceship.prototype.setRadius = function(radius) {
    this.radius = radius;
    return this._cached = {
      launchedPath: this._computeLaunchedPath(),
      inLoopPath: this._computeInLoopPath()
    };
  };

  Spaceship.prototype.setup = function() {
    var g, matrix, v;
    g = new THREE.Geometry();
    g.vertices.push(new THREE.Vector3(0, -52.5, -10), new THREE.Vector3(-10, -67.5, 10), new THREE.Vector3(-50, -42.5, 10), new THREE.Vector3(0, 67.5, 10), new THREE.Vector3(+50, -42.5, 10), new THREE.Vector3(+10, -67.5, 10));
    g.faces.push(new THREE.Face3(0, 3, 1), new THREE.Face3(1, 2, 3), new THREE.Face3(3, 0, 5), new THREE.Face3(5, 4, 3));
    g.computeFaceNormals();
    matrix = new THREE.Matrix4();
    matrix.makeRotationX(Math.PI * .5);
    g.applyMatrix(matrix);
    matrix.makeRotationZ(Math.PI);
    g.applyMatrix(matrix);
    this.ship = THREE.SceneUtils.createMultiMaterialObject(g, [
      new THREE.MeshLambertMaterial({
        color: 0x0088ff,
        side: THREE.DoubleSide
      })
    ]);
    this.ship.castShadow = true;
    this.ship.receiveShadow = true;
    this.ship.scale.set(.15, .15, .15);
    this.add(this.ship);
    this._cached = this._computePaths();
    v = this._cached.launchedPath.getPointAt(0);
    return this.ship.position.set(v.x, v.y, v.z);
  };

  Spaceship.prototype.setState = function(state) {
    var v;
    this.state = state;
    switch (state) {
      case SPACE.Spaceship.IDLE:
        SPACE.LOG('IDLE');
        return this.path = null;
      case SPACE.Spaceship.LAUNCHED:
        SPACE.LOG('LAUNCHED');
        this._resetTime();
        this.path = this._cached.launchedPath || this._computeLaunchedPath();
        this.duration = 10 * 1000;
        v = this.path.getPoint(0);
        return this.ship.position.set(v.x, v.y, v.z);
      case SPACE.Spaceship.IN_LOOP:
        SPACE.LOG('IN_LOOP');
        this._resetTime();
        this.path = this._cached.inLoopPath || this._computeInLoopPath();
        this.duration = 30 * 1000;
        v = this.path.getPoint(0);
        return this.ship.position.set(v.x, v.y, v.z);
      case SPACE.Spaceship.ARRIVED:
        SPACE.LOG('ARRIVED');
        this.path = null;
        return setTimeout((function(_this) {
          return function() {
            return _this.setState(SPACE.Spaceship.LAUNCHED);
          };
        })(this), 5000);
      default:
        return this.setState(SPACE.Spaceship.IDLE);
    }
  };

  Spaceship.prototype.update = function(delta) {
    var t;
    if (this.state !== SPACE.Spaceship.IDLE && this.state !== SPACE.Spaceship.ARRIVED) {
      this.time += delta;
      t = Math.min(this.time / this.duration, 1);
      if (t >= 1) {
        this._resetTime();
        if (this.state === SPACE.Spaceship.LAUNCHED) {
          this.setState(SPACE.Spaceship.IN_LOOP);
        } else if (this.state === SPACE.Spaceship.IN_LOOP) {
          this.setState(SPACE.Spaceship.ARRIVED);
        }
        return;
      }
      if (this.state === SPACE.Spaceship.LAUNCHED) {
        t = _Easing.QuadraticEaseOut(t);
      }
      return this._progress(t);
    }
  };

  Spaceship.prototype._resetTime = function() {
    return this.time = 0;
  };

  Spaceship.prototype._progress = function(t) {
    var ahead, v;
    v = this.path.getPointAt(t);
    this.ship.position.set(v.x, v.y, v.z);
    ahead = Math.min(t + 10 / this.path.getLength(), 1);
    v = this.path.getPointAt(ahead).multiplyScalar(1);
    this.ship.lookAt(v);
    if (this.state === SPACE.Spaceship.IN_LOOP) {
      return this.ship.rotation.set(this.ship.rotation.x, this.ship.rotation.y, 0);
    }
  };

  Spaceship.prototype._computePaths = function() {
    var angle, curve, curveA, curveB, curvePoint, distance, fromA, mid, path, points, ref, toA;
    fromA = new THREE.Vector3();
    fromA.x = this.target.x + Math.cos(this.angle) * 500;
    fromA.y = this.target.y + Math.sin(this.angle) * 500;
    fromA.z = 600;
    path = new THREE.IncomingCurve(this.target, this.angle, this.radius);
    path.inverse = true;
    path.useGolden = true;
    mid = path.getPoint(0);
    ref = path.getPoint(.025);
    angle = _Math.angleBetweenPoints(mid, ref) + Math.PI;
    distance = mid.distanceTo(ref);
    curvePoint = new THREE.Vector3();
    curvePoint.x = mid.x + Math.cos(angle) * distance;
    curvePoint.y = mid.y + Math.sin(angle) * distance;
    curvePoint.z = mid.z;
    toA = path.getPoint(0);
    curve = new THREE.TestCurve(fromA, curvePoint);
    points = curve.getPoints(10);
    points.push(toA);
    curveA = _THREE.HermiteCurve(points);
    curveB = _THREE.HermiteCurve(path.getPoints(10));
    return {
      launchedPath: curveA,
      inLoopPath: curveB
    };
  };

  Spaceship.prototype._debugPath = function(path, color) {
    var g, tube;
    if (color == null) {
      color = 0xFF0000;
    }
    g = new THREE.TubeGeometry(path, 200, .5, 10, true);
    tube = THREE.SceneUtils.createMultiMaterialObject(g, [
      new THREE.MeshBasicMaterial({
        color: color,
        opacity: 0.3,
        wireframe: true,
        transparent: true
      }), new THREE.MeshLambertMaterial({
        color: 0xFF88FF,
        side: THREE.DoubleSide
      })
    ]);
    return this.add(tube);
  };

  return Spaceship;

})(THREE.Group);

//# sourceMappingURL=data:application/json;base64,