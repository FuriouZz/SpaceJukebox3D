var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.MainScene = (function(_super) {
  __extends(MainScene, _super);

  MainScene.prototype.equalizer = null;

  MainScene.prototype.jukebox = null;

  MainScene.prototype.waveformData = null;

  function MainScene() {
    this._whileplaying = __bind(this._whileplaying, this);
    this._eJukeboxIsStopped = __bind(this._eJukeboxIsStopped, this);
    this._eTrackOnAdd = __bind(this._eTrackOnAdd, this);
    var middlePoint, options;
    MainScene.__super__.constructor.apply(this, arguments);
    middlePoint = new THREE.Vector3(0, 0, 0);
    options = {
      minLength: 0,
      maxLength: 100,
      radius: 300,
      absolute: false,
      lineForceDown: .5,
      lineForceUp: 1
    };
    this.equalizer = new SPACE.Equalizer(middlePoint, options);
    this.add(this.equalizer);
    this.jukebox = new SPACE.Jukebox();
    this.jukebox.whileplaying = this._whileplaying;
    this.jukebox.predefinedPlaylist();
    this.spaceship = new SPACE.Spaceship(middlePoint, this.equalizer.radius);
    this.add(this.spaceship);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 1000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 2000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 4000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 8000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 16000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 32000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 64000);
    setTimeout((function(_this) {
      return function() {
        _this.spaceship = new SPACE.Spaceship(middlePoint, _this.equalizer.radius);
        return _this.add(_this.spaceship);
      };
    })(this), 128000);
    this.setupSomething();
    this.waveformData = {};
    this._events();
  }

  MainScene.prototype._events = function() {
    document.addEventListener(JUKEBOX.TRACK_ON_ADD.type, this._eTrackOnAdd);
    return document.addEventListener(JUKEBOX.IS_STOPPED.type, this._eJukeboxIsStopped);
  };

  MainScene.prototype._eTrackOnAdd = function(e) {
    var track;
    track = e.object.track;
    track.spaceship = null;
    return _H.trigger(JUKEBOX.TRACK_ADDED, {
      track: track
    });
  };

  MainScene.prototype._eJukeboxIsStopped = function(e) {
    return this.equalizer.mute();
  };

  MainScene.prototype.setupSomething = function() {
    var g, light, m;
    g = new THREE.BoxGeometry(100, 100, 100);
    m = new THREE.MeshLambertMaterial({
      color: 0x0088ff,
      shading: THREE.FlatShading
    });
    this.cube = new THREE.Mesh(g, m);
    this.cube.scale.set(.5, .5, .5);
    this.cube.rotation.set(Math.random(), Math.random(), Math.random());
    this.cube.castShadow = true;
    this.cube.receiveShadow = true;
    this.add(this.cube);
    this.cube.update = function() {
      this.rotation.x += .01;
      this.rotation.y -= .01;
      return this.rotation.z += .01;
    };
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .2);
    light.position.set(500, 500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .6);
    light.position.set(-500, 500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .2);
    light.position.set(500, -500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .2);
    light.position.set(-500, -500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(500, 500, -500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(-500, 500, -500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(500, -500, -500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(-500, -500, -500);
    return this.add(light);
  };

  MainScene.prototype.update = function(delta) {
    MainScene.__super__.update.call(this, delta);
    return this.jukebox.update(delta);
  };

  MainScene.prototype._whileplaying = function() {
    var datas, i, sound, value, _i;
    sound = this.jukebox.current.sound;
    datas = Array(256);
    for (i = _i = 0; _i <= 127; i = ++_i) {
      value = Math.max(sound.waveformData.left[i], sound.waveformData.right[i]);
      datas[i] = datas[255 - i] = value;
    }
    if (this.jukebox.current && this.jukebox.current.sound.paused) {
      this.equalizer.mute();
    } else if (this.waveformData.hasOwnProperty('mono')) {
      this.equalizer.setValues(this.waveformData.mono);
    }
    this.waveformData.mono = datas;
    return this.waveformData.stereo = sound.waveformData;
  };

  return MainScene;

})(SPACE.Scene);

//# sourceMappingURL=data:application/json;base64,