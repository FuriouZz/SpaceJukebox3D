var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.MainScene = (function(_super) {
  __extends(MainScene, _super);

  MainScene.prototype.equalizer = null;

  MainScene.prototype.jukebox = null;

  MainScene.prototype.waveformData = null;

  function MainScene() {
    this._whileplaying = __bind(this._whileplaying, this);
    this._eTrackOnAdd = __bind(this._eTrackOnAdd, this);
    var middlePoint, options;
    MainScene.__super__.constructor.apply(this, arguments);
    middlePoint = new THREE.Vector3(0, 0, 0);
    options = {
      minLength: 0,
      maxLength: 100,
      radius: 200,
      absolute: false,
      lineForceDown: .5,
      lineForceUp: 1
    };
    this.equalizer = new SPACE.Equalizer(middlePoint, options);
    this.add(this.equalizer);
    this.jukebox = new SPACE.Jukebox();
    this.jukebox.whileplaying = this._whileplaying;
    this.spaceship = new SPACE.Spaceship(middlePoint, this.equalizer.radius);
    this.add(this.spaceship);
    this.setupSomething();
    this.waveformData = {};
    this._events();
  }

  MainScene.prototype._events = function() {
    return document.addEventListener(JUKEBOX.TRACK_ON_ADD.type, this._eTrackOnAdd);
  };

  MainScene.prototype._eTrackOnAdd = function(e) {
    var track;
    track = e.object.track;
    track.spaceship = null;
    return HELPERS.trigger(JUKEBOX.TRACK_ADDED, {
      track: track
    });
  };

  MainScene.prototype.setupSomething = function() {
    var circle, g, light, m;
    g = new THREE.SphereGeometry();
    m = new THREE.MeshLambertMaterial({
      color: 0xFFAA22
    });
    circle = new THREE.Mesh(g, m);
    circle.castShadow = true;
    circle.receiveShadow = true;
    this.add(circle);
    circle.update = function() {
      this.rotation.x += .01;
      this.rotation.y -= .01;
      return this.rotation.z += .01;
    };
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .2);
    light.position.set(500, 500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .6);
    light.position.set(-500, 500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .2);
    light.position.set(500, -500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .2);
    light.position.set(-500, -500, 500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(500, 500, -500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(-500, 500, -500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(500, -500, -500);
    this.add(light);
    light = new THREE.DirectionalLight(0xFFFFFF, 1.8 * .1);
    light.position.set(-500, -500, -500);
    return this.add(light);
  };

  MainScene.prototype.update = function(delta) {
    MainScene.__super__.update.call(this, delta);
    return this.jukebox.update(delta);
  };

  MainScene.prototype._whileplaying = function() {
    var datas, i, sound, value, _i;
    sound = this.jukebox.current.sound;
    datas = Array(256);
    for (i = _i = 0; _i <= 127; i = ++_i) {
      value = Math.max(sound.waveformData.left[i], sound.waveformData.right[i]);
      datas[i] = datas[255 - i] = value;
    }
    if (this.jukebox.current && this.jukebox.current.sound.paused) {
      this.equalizer.mute();
    } else if (this.waveformData.hasOwnProperty('mono')) {
      this.equalizer.setValues(this.waveformData.mono);
    }
    this.waveformData.mono = datas;
    return this.waveformData.stereo = sound.waveformData;
  };

  return MainScene;

})(SPACE.Scene);

//# sourceMappingURL=data:application/json;base64,