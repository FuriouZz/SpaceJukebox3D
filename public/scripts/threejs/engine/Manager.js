var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SPACE.SceneManager = (function() {
  SceneManager.prototype.currentScene = null;

  SceneManager.prototype._scenes = null;

  SceneManager.prototype._stats = null;

  SceneManager.prototype._tick = 0;

  SceneManager.prototype._renderer = null;

  SceneManager.prototype._camera = null;

  function SceneManager(width, height) {
    this._update = __bind(this._update, this);
    this._render = __bind(this._render, this);
    if (this._renderer) {
      return this;
    }
    this._tick = Date.now();
    this._scenes = [];
    this._camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    this._camera.position.setZ(500);
    this._renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    this._renderer.setClearColor(new THREE.Color(0xFFF0DB));
    this._renderer.setSize(window.innerWidth, window.innerHeight);
    this._renderer.shadozMapEnabled = true;
    this._renderer.shadozMapSoft = true;
    this._renderer.shadozMapType = THREE.PCFShadowMap;
    document.getElementById('wrapper').appendChild(this._renderer.domElement);
    if (SPACE.ENV === 'development') {
      this._setupStats();
    }
    this._render();
    this._update();
    window.onresize = (function(_this) {
      return function() {
        _this._renderer.setSize(window.innerWidth, window.innerHeight);
        _this._camera.aspect = window.innerWidth / window.innerHeight;
        return _this._camera.updateProjectionMatrix();
      };
    })(this);
  }

  SceneManager.prototype._setupStats = function() {
    this._stats = new Stats();
    this._stats.setMode(0);
    this._stats.domElement.style.position = 'absolute';
    this._stats.domElement.style.left = '0px';
    this._stats.domElement.style.top = '0px';
    return document.body.appendChild(this._stats.domElement);
  };

  SceneManager.prototype._render = function() {
    if (SPACE.ENV === 'development') {
      this._stats.begin();
    }
    window.requestAnimationFrame(this._render);
    if (!this.currentScene || this.currentScene.isPaused()) {
      return;
    }
    this._renderer.render(this.currentScene, this._camera);
    if (SPACE.ENV === 'development') {
      return this._stats.end();
    }
  };

  SceneManager.prototype._update = function() {
    var c;
    setTimeout(this._update, 1000 / SPACE.FPS);
    if (!this.currentScene || this.currentScene.isPaused()) {
      return;
    }
    c = Date.now();
    this.currentScene.update(c - this._tick);
    return this._tick = c;
  };

  SceneManager.prototype.createScene = function(identifier, aScene, interactive) {
    var scene;
    if (this._scenes[identifier]) {
      return void 0;
    }
    scene = new aScene();
    this._scenes[identifier] = scene;
    return scene;
  };

  SceneManager.prototype.goToScene = function(identifier) {
    if (this._scenes[identifier]) {
      if (this.currentScene) {
        this.currentScene.pause();
      }
      this.currentScene = this._scenes[identifier];
      this.currentScene.resume();
      this.debug();
      return true;
    }
    return false;
  };

  SceneManager.prototype.debug = function() {};

  return SceneManager;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRocmVlanMvZW5naW5lL01hbmFnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsa0ZBQUE7O0FBQUEsS0FBVyxDQUFDO0FBRVYseUJBQUEsWUFBQSxHQUFjLElBQWQsQ0FBQTs7QUFBQSx5QkFDQSxPQUFBLEdBQVMsSUFEVCxDQUFBOztBQUFBLHlCQUVBLE1BQUEsR0FBUSxJQUZSLENBQUE7O0FBQUEseUJBR0EsS0FBQSxHQUFPLENBSFAsQ0FBQTs7QUFBQSx5QkFLQSxTQUFBLEdBQVcsSUFMWCxDQUFBOztBQUFBLHlCQU1BLE9BQUEsR0FBVyxJQU5YLENBQUE7O0FBUWEsRUFBQSxzQkFBQyxLQUFELEVBQVEsTUFBUixHQUFBO0FBQ1gsNkNBQUEsQ0FBQTtBQUFBLDZDQUFBLENBQUE7QUFBQSxJQUFBLElBQUksSUFBQyxDQUFBLFNBQUw7QUFBcUIsYUFBTyxJQUFQLENBQXJCO0tBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBSSxDQUFDLEdBQUwsQ0FBQSxDQUZULENBQUE7QUFBQSxJQUlBLElBQUMsQ0FBQSxPQUFELEdBQWEsRUFKYixDQUFBO0FBQUEsSUFNQSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsS0FBSyxDQUFDLGlCQUFOLENBQXdCLEVBQXhCLEVBQTRCLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLE1BQU0sQ0FBQyxXQUF2RCxFQUFvRSxHQUFwRSxFQUF5RSxJQUF6RSxDQU5mLENBQUE7QUFBQSxJQU9BLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQWxCLENBQXVCLEdBQXZCLENBUEEsQ0FBQTtBQUFBLElBWUEsSUFBQyxDQUFBLFNBQUQsR0FBaUIsSUFBQSxLQUFLLENBQUMsYUFBTixDQUFvQjtBQUFBLE1BQUMsU0FBQSxFQUFXLElBQVo7S0FBcEIsQ0FaakIsQ0FBQTtBQUFBLElBYUEsSUFBQyxDQUFBLFNBQVMsQ0FBQyxhQUFYLENBQTZCLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FB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LENBQUEsT0FBUSxDQUFBLFVBQUEsQ0FEekIsQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLFlBQVksQ0FBQyxNQUFkLENBQUEsQ0FGQSxDQUFBO0FBQUEsTUFHQSxJQUFDLENBQUEsS0FBRCxDQUFBLENBSEEsQ0FBQTtBQUlBLGFBQU8sSUFBUCxDQUxKO0tBQUE7QUFPQSxXQUFPLEtBQVAsQ0FSUztFQUFBLENBN0VYLENBQUE7O0FBQUEseUJBdUZBLEtBQUEsR0FBTyxTQUFBLEdBQUEsQ0F2RlAsQ0FBQTs7c0JBQUE7O0lBRkYsQ0FBQSIsImZpbGUiOiJ0aHJlZWpzL2VuZ2luZS9NYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU1BBQ0UuU2NlbmVNYW5hZ2VyXG5cbiAgY3VycmVudFNjZW5lOiBudWxsXG4gIF9zY2VuZXM6IG51bGxcbiAgX3N0YXRzOiBudWxsXG4gIF90aWNrOiAwXG5cbiAgX3JlbmRlcmVyOiBudWxsXG4gIF9jYW1lcmE6ICAgbnVsbFxuXG4gIGNvbnN0cnVjdG9yOiAod2lkdGgsIGhlaWdodCktPlxuICAgIGlmIChAX3JlbmRlcmVyKSB0aGVuIHJldHVybiBAXG5cbiAgICBAX3RpY2sgPSBEYXRlLm5vdygpXG5cbiAgICBAX3NjZW5lcyAgID0gW11cblxuICAgIEBfY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwKVxuICAgIEBfY2FtZXJhLnBvc2l0aW9uLnNldFooNTAwKVxuICAgICMgQF9jYW1lcmEucG9zaXRpb24uc2V0WSg1MDApXG4gICAgIyBAX2NhbWVyYS5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCkpXG5cblxuICAgIEBfcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7YW50aWFsaWFzOiB0cnVlfSlcbiAgICBAX3JlbmRlcmVyLnNldENsZWFyQ29sb3IobmV3IFRIUkVFLkNvbG9yKDB4RkZGMERCKSlcbiAgICBAX3JlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICBAX3JlbmRlcmVyLnNoYWRvek1hcEVuYWJsZWQgPSB0cnVlXG4gICAgQF9yZW5kZXJlci5zaGFkb3pNYXBTb2Z0ICAgID0gdHJ1ZVxuICAgIEBfcmVuZGVyZXIuc2hhZG96TWFwVHlwZSAgICA9IFRIUkVFLlBDRlNoYWRvd01hcFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJykuYXBwZW5kQ2hpbGQoQF9yZW5kZXJlci5kb21FbGVtZW50KVxuXG4gICAgQF9zZXR1cFN0YXRzKCkgaWYgU1BBQ0UuRU5WID09ICdkZXZlbG9wbWVudCdcblxuICAgIEBfcmVuZGVyKClcbiAgICBAX3VwZGF0ZSgpXG5cbiAgICB3aW5kb3cub25yZXNpemUgPSA9PlxuICAgICAgQF9yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gICAgICBAX2NhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgQF9jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG5cbiAgX3NldHVwU3RhdHM6IC0+XG4gICAgQF9zdGF0cyA9IG5ldyBTdGF0cygpXG4gICAgQF9zdGF0cy5zZXRNb2RlKDApXG4gICAgQF9zdGF0cy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIEBfc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzBweCdcbiAgICBAX3N0YXRzLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gJzBweCdcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBAX3N0YXRzLmRvbUVsZW1lbnQgKVxuXG4gIF9yZW5kZXI6ID0+XG4gICAgQF9zdGF0cy5iZWdpbigpIGlmIFNQQUNFLkVOViA9PSAnZGV2ZWxvcG1lbnQnXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShAX3JlbmRlcilcblxuICAgIGlmICFAY3VycmVudFNjZW5lIG9yIEBjdXJyZW50U2NlbmUuaXNQYXVzZWQoKVxuICAgICAgICByZXR1cm5cblxuICAgIEBfcmVuZGVyZXIucmVuZGVyKCBAY3VycmVudFNjZW5lLCBAX2NhbWVyYSApXG5cbiAgICBAX3N0YXRzLmVuZCgpIGlmIFNQQUNFLkVOViA9PSAnZGV2ZWxvcG1lbnQnXG5cbiAgX3VwZGF0ZTogPT5cbiAgICBzZXRUaW1lb3V0KEBfdXBkYXRlLCAxMDAwIC8gU1BBQ0UuRlBTKVxuXG4gICAgaWYgIUBjdXJyZW50U2NlbmUgb3IgQGN1cnJlbnRTY2VuZS5pc1BhdXNlZCgpXG4gICAgICAgIHJldHVyblxuXG4gICAgYyA9IERhdGUubm93KClcbiAgICBAY3VycmVudFNjZW5lLnVwZGF0ZShjIC0gQF90aWNrKVxuICAgIEBfdGljayA9IGNcblxuICBjcmVhdGVTY2VuZTogKGlkZW50aWZpZXIsIGFTY2VuZSwgaW50ZXJhY3RpdmUpLT5cbiAgICBpZiBAX3NjZW5lc1tpZGVudGlmaWVyXVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG5cbiAgICBzY2VuZSA9IG5ldyBhU2NlbmUoKVxuICAgIEBfc2NlbmVzW2lkZW50aWZpZXJdID0gc2NlbmVcblxuICAgIHJldHVybiBzY2VuZVxuXG4gIGdvVG9TY2VuZTogKGlkZW50aWZpZXIpLT5cbiAgICBpZiBAX3NjZW5lc1tpZGVudGlmaWVyXVxuICAgICAgICBAY3VycmVudFNjZW5lLnBhdXNlKCkgaWYgQGN1cnJlbnRTY2VuZVxuICAgICAgICBAY3VycmVudFNjZW5lID0gQF9zY2VuZXNbaWRlbnRpZmllcl1cbiAgICAgICAgQGN1cnJlbnRTY2VuZS5yZXN1bWUoKVxuICAgICAgICBAZGVidWcoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgZGVidWc6IC0+XG4gICAgIyAjIHRyaWFuZ2xlU2hhcGUgPSBuZXcgVEhSRUUuU2hhcGUoKVxuICAgICMgIyB0cmlhbmdsZVNoYXBlLm1vdmVUbyggIDgwLCAyMCApXG4gICAgIyAjIHRyaWFuZ2xlU2hhcGUubGluZVRvKCAgNDAsIDgwIClcbiAgICAjICMgdHJpYW5nbGVTaGFwZS5saW5lVG8oIDEyMCwgODAgKVxuICAgICMgIyB0cmlhbmdsZVNoYXBlLmxpbmVUbyggIDgwLCAyMCApXG5cbiAgICAjICMgY29uc29sZS5sb2cgdHJpYW5nbGVTaGFwZVxuXG4gICAgIyAjIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNoYXBlR2VvbWV0cnkoIHRyaWFuZ2xlU2hhcGUgKVxuICAgICMgIyBtYXQgICAgICA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweDAwZmYwMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZX0gKVxuICAgICMgIyBAdHIgICAgICAgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0KVxuICAgICMgIyBAY3VycmVudFNjZW5lLmFkZChAdHIpXG5cbiAgICAjICMgQF9jYW1lcmEubG9va0F0KEBjdXJyZW50U2NlbmUuZXF1YWxpemVyLmNlbnRlcilcblxuICAgICMgc2NlbmUgPSBuZXcgU1BBQ0UuU2NlbmUoKVxuXG4gICAgIyBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNDUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDApIzc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwKVxuICAgICMgY2FtZXJhLnBvc2l0aW9uLnNldFooNTAwKVxuXG4gICAgIyByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbnRpYWxpYXM6IHRydWV9KVxuICAgICMgIyByZW5kZXJlci5zZXRDbGVhckNvbG9yKG5ldyBUSFJFRS5Db2xvcigweDAwODhGRikpXG4gICAgIyByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gICAgIyAjIHJlbmRlcmVyLnNoYWRvek1hcEVuYWJsZWQgPSB0cnVlXG4gICAgIyAjIHJlbmRlcmVyLnNoYWRvek1hcFNvZnQgICAgPSB0cnVlXG4gICAgIyAjIHJlbmRlcmVyLnNoYWRvek1hcFR5cGUgICAgPSBUSFJFRS5QQ0ZTaGFkb3dNYXBcblxuICAgICMgY3ViZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEwMCwgMTAwLCAxMDApO1xuICAgICMgY3ViZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjogMHhmZjAwMDB9KTtcbiAgICAjIGN1YmUgPSBuZXcgVEhSRUUuTWVzaChjdWJlR2VvbWV0cnksIGN1YmVNYXRlcmlhbCk7XG5cbiAgICAjIGN1YmUucG9zaXRpb24ueCA9IDFcbiAgICAjIGN1YmUucG9zaXRpb24ueSA9IDFcbiAgICAjIGN1YmUucG9zaXRpb24ueiA9IDFcblxuICAgICMgc2NlbmUuYWRkKGN1YmUpXG5cbiAgICAjIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJykuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcblxuICAgICMgcmVuZGVyID0gLT5cbiAgICAjICAgY3ViZS5yb3RhdGlvbi54ICs9IDAuMDJcbiAgICAjICAgY3ViZS5yb3RhdGlvbi55ICs9IDAuMDJcbiAgICAjICAgY3ViZS5yb3RhdGlvbi56ICs9IDAuMDJcblxuICAgICMgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSlcbiAgICAjICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcilcbiAgICAjIHJlbmRlcigpXG4iXX0=