var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SPACE.Jukebox = (function() {
  Jukebox.prototype.current = null;

  Jukebox.prototype.playlist = null;

  Jukebox.prototype.state = null;

  Jukebox.prototype.SC = null;

  Jukebox.IS_PLAYING = 'IS_PLAYING';

  Jukebox.IS_STOPPED = 'IS_STOPPED';

  function Jukebox() {
    this._onfinish = __bind(this._onfinish, this);
    this._onplay = __bind(this._onplay, this);
    this._starting = __bind(this._starting, this);
    this._eTrackAdded = __bind(this._eTrackAdded, this);
    this.SC = new SPACE.SoundCloud(SPACE.SOUNDCLOUD.id);
    this.playlist = [];
    this._events();
  }

  Jukebox.prototype._events = function() {
    return document.addEventListener(JUKEBOX.TRACK_ADDED.type, this._eTrackAdded);
  };

  Jukebox.prototype._eTrackAdded = function(e) {
    var track;
    track = e.object.track;
    track.pendingDuration = this._calcPending(this.playlist.length - 1);
    this.playlist.push(e.object.track);
    return SPACE.LOG('Sound added: ' + e.object.track.data.title);
  };

  Jukebox.prototype.predefinedPlaylist = function() {
    var list, url, _i, _len, _results;
    list = ['https://soundcloud.com/takugotbeats/sets/25-nights-for-nujabes'];
    list = _Coffee.shuffle(list);
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      url = list[_i];
      _results.push(this.add(url));
    }
    return _results;
  };

  Jukebox.prototype.setState = function(state) {
    this.state = state;
    switch (state) {
      case SPACE.Jukebox.IS_PLAYING:
        return SPACE.LOG('Next: ' + this.current.data.title);
      default:
        return SPACE.LOG('jukeboxisstopped');
    }
  };

  Jukebox.prototype.list = function() {
    var list, track, _i, _len, _ref;
    list = [];
    _ref = this.playlist;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      track = _ref[_i];
      list.push({
        title: track.data.title,
        pendingDuration: track.pendingDuration
      });
    }
    return list;
  };

  Jukebox.prototype.add = function(soundOrPlaylist) {
    return this.SC.getSoundOrPlaylist(soundOrPlaylist, (function(_this) {
      return function(o) {
        var data, track, tracks, _i, _len, _results;
        tracks = null;
        if (o.hasOwnProperty('tracks')) {
          tracks = _Coffee.shuffle(o.tracks);
        } else {
          tracks = [];
          tracks.push(o);
        }
        _results = [];
        for (_i = 0, _len = tracks.length; _i < _len; _i++) {
          data = tracks[_i];
          track = new SPACE.Track(data);
          _results.push(_H.trigger(JUKEBOX.TRACK_ON_ADD, {
            track: track
          }));
        }
        return _results;
      };
    })(this));
  };

  Jukebox.prototype._calcPending = function(position) {
    var duration, i, track, _i, _len, _ref;
    duration = 0;
    _ref = this.playlist;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      track = _ref[i];
      duration += track.data.duration;
      if (i === position) {
        break;
      }
    }
    return duration;
  };

  Jukebox.prototype.update = function(delta) {
    var i, track, _i, _len, _ref;
    _ref = this.playlist;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      track = _ref[i];
      track.update(delta);
    }
    if (this.playlist.length > 0) {
      if (this.current === null) {
        return this.next();
      }
    }
  };

  Jukebox.prototype.next = function(track) {
    if (this.current) {
      this._onfinish();
    }
    this.current = this.playlist.shift();
    return this.SC.streamSound(this.current.data, this._starting, {
      onplay: this._onplay,
      onfinish: this._onfinish,
      onstop: this._onstop,
      whileplaying: this.whileplaying
    });
  };

  Jukebox.prototype._starting = function(sound) {
    this.current.sound = sound;
    return sound.mute();
  };

  Jukebox.prototype._onplay = function() {
    _H.trigger(JUKEBOX.IS_PLAYING);
    return this.setState(SPACE.Jukebox.IS_PLAYING);
  };

  Jukebox.prototype._onfinish = function() {
    this.current.sound.stop();
    this.current.sound.destruct();
    this.current = null;
    _H.trigger(JUKEBOX.IS_STOPPED);
    return this.setState(SPACE.Jukebox.IS_STOPPED);
  };

  return Jukebox;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRocmVlanMvc291bmRzL0p1a2Vib3guY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsa0ZBQUE7O0FBQUEsS0FBVyxDQUFDO0FBRVYsb0JBQUEsT0FBQSxHQUFTLElBQVQsQ0FBQTs7QUFBQSxvQkFDQSxRQUFBLEdBQVUsSUFEVixDQUFBOztBQUFBLG9CQUdBLEtBQUEsR0FBTyxJQUhQLENBQUE7O0FBQUEsb0JBS0EsRUFBQSxHQUFJLElBTEosQ0FBQTs7QUFBQSxFQVFBLE9BQUMsQ0FBQSxVQUFELEdBQWEsWUFSYixDQUFBOztBQUFBLEVBU0EsT0FBQyxDQUFBLFVBQUQsR0FBYSxZQVRiLENBQUE7O0FBV2EsRUFBQSxpQkFBQSxHQUFBO0FBQ1gsaURBQUEsQ0FBQTtBQUFBLDZDQUFBLENBQUE7QUFBQSxpREFBQSxDQUFBO0FBQUEsdURBQUEsQ0FBQTtBQUFBLElBQUEsSUFBQyxDQUFBLEVBQUQsR0FBVSxJQUFBLEtBQUssQ0FBQyxVQUFOLENBQWlCLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBbEMsQ0FBVixDQUFBO0FBQUEsSUFFQSxJQUFDLENBQUEsUUFBRCxHQUFZLEVBRlosQ0FBQTtBQUFBLElBR0EsSUFBQyxDQUFBLE9BQUQsQ0FBQSxDQUhBLENBRFc7RUFBQSxDQVhiOztBQUFBLG9CQWlCQSxPQUFBLEdBQVMsU0FBQSxHQUFBO1dBQ1AsUUFBUSxDQUFDLGdCQUFULENBQTBCLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBOUMsRUFBb0QsSUFBQyxDQUFBLFlBQXJELEVBRE87RUFBQSxDQWpCVCxDQUFBOztBQUFBLG9CQW9CQSxZQUFBLEdBQWMsU0FBQyxDQUFELEdBQUE7QUFDWixRQUFBLEtBQUE7QUFBQSxJQUFBLEtBQUEsR0FBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQWpCLENBQUE7QUFBQSxJQUNBLEtBQUssQ0FBQyxlQUFOLEdBQXdCLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFWLEdB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LENBQUE7V0FDQSxLQUFLLENBQUMsSUFBTixDQUFBLEVBRlM7RUFBQSxDQW5HWCxDQUFBOztBQUFBLG9CQXVHQSxPQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ1AsSUFBQSxFQUFFLENBQUMsT0FBSCxDQUFXLE9BQU8sQ0FBQyxVQUFuQixDQUFBLENBQUE7V0FDQSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBeEIsRUFGTztFQUFBLENBdkdULENBQUE7O0FBQUEsb0JBMkdBLFNBQUEsR0FBVyxTQUFBLEdBQUE7QUFDVCxJQUFBLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQWYsQ0FBQSxDQUFBLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQWYsQ0FBQSxDQURBLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFGWCxDQUFBO0FBQUEsSUFHQSxFQUFFLENBQUMsT0FBSCxDQUFXLE9BQU8sQ0FBQyxVQUFuQixDQUhBLENBQUE7V0FJQSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBeEIsRUFMUztFQUFBLENBM0dYLENBQUE7O2lCQUFBOztJQUZGLENBQUEiLCJmaWxlIjoidGhyZWVqcy9zb3VuZHMvSnVrZWJveC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNQQUNFLkp1a2Vib3hcblxuICBjdXJyZW50OiBudWxsXG4gIHBsYXlsaXN0OiBudWxsXG5cbiAgc3RhdGU6IG51bGxcblxuICBTQzogbnVsbFxuXG4gICMgIyBTVEFURVNcbiAgQElTX1BMQVlJTkc6ICdJU19QTEFZSU5HJ1xuICBASVNfU1RPUFBFRDogJ0lTX1NUT1BQRUQnXG5cbiAgY29uc3RydWN0b3I6IC0+XG4gICAgQFNDID0gbmV3IFNQQUNFLlNvdW5kQ2xvdWQoU1BBQ0UuU09VTkRDTE9VRC5pZClcblxuICAgIEBwbGF5bGlzdCA9IFtdXG4gICAgQF9ldmVudHMoKVxuXG4gIF9ldmVudHM6IC0+XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihKVUtFQk9YLlRSQUNLX0FEREVELnR5cGUsIEBfZVRyYWNrQWRkZWQpXG5cbiAgX2VUcmFja0FkZGVkOiAoZSk9PlxuICAgIHRyYWNrID0gZS5vYmplY3QudHJhY2tcbiAgICB0cmFjay5wZW5kaW5nRHVyYXRpb24gPSBAX2NhbGNQZW5kaW5nKEBwbGF5bGlzdC5sZW5ndGgtMSlcbiAgICBAcGxheWxpc3QucHVzaChlLm9iamVjdC50cmFjaylcblxuICAgICMgQHBsYXlsaXN0ID0gX0NvZmZlZS5zaHVmZmxlKEBwbGF5bGlzdClcbiAgICBTUEFDRS5MT0coJ1NvdW5kIGFkZGVkOiAnICsgZS5vYmplY3QudHJhY2suZGF0YS50aXRsZSlcblxuICBwcmVkZWZpbmVkUGxheWxpc3Q6IC0+XG4gICAgbGlzdCA9IFtcbiAgICAgICMgJ2h0dHBzOi8vc291bmRjbG91ZC5jb20vY2hvbmNoLTIvY291cnRlLWRhbnNlLW1hY2FicmUnXG4gICAgICAjICdodHRwczovL3NvdW5kY2xvdWQuY29tL2Nob25jaC0yL21vdWFpcydcbiAgICAgICMgJ2h0dHBzOi8vc291bmRjbG91ZC5jb20vY2hvbmNoLTIvY2FjYWNvLTInXG4gICAgICAjICdodHRwczovL3NvdW5kY2xvdWQuY29tL2Nob25jaC0yL2R1b2RlbnVtJ1xuICAgICAgIyAnaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9jaG9uY2gtMi9saXR0bGUtZ3JlZW4tbW9ua2V5J1xuICAgICAgIyAnaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9odWh3aGF0YW5kd2hlcmUvc2V0cy9zdXByZW1lLWxhemluZXNzLXRoZS1jZWxlc3RpY3MnXG4gICAgICAnaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS90YWt1Z290YmVhdHMvc2V0cy8yNS1uaWdodHMtZm9yLW51amFiZXMnXG4gICAgICAjICdodHRwczovL3NvdW5kY2xvdWQuY29tL3RvbW1pc2NoL3NldHMvdG9tLW1pc2NoLXNvdWxlY3Rpb24td2hpdGUnXG4gICAgICAjICdodHRwczovL3NvdW5kY2xvdWQuY29tL3Byb2Zlc3NvcmtsaXEvc2V0cy90cmFja21hbmlhLXZhbGxleS1vc3QnXG4gICAgICAjICdodHRwczovL3NvdW5kY2xvdWQuY29tL3Byb2Zlc3NvcmtsaXEvc2V0cy90cmFja21hbmlhLXN0YWRpdW0tb3N0J1xuICAgIF1cblxuICAgIGxpc3QgPSBfQ29mZmVlLnNodWZmbGUobGlzdClcbiAgICBmb3IgdXJsIGluIGxpc3RcbiAgICAgIEBhZGQodXJsKVxuXG4gIHNldFN0YXRlOiAoc3RhdGUpLT5cbiAgICBAc3RhdGUgPSBzdGF0ZVxuICAgIHN3aXRjaChzdGF0ZSlcbiAgICAgIHdoZW4gU1BBQ0UuSnVrZWJveC5JU19QTEFZSU5HXG4gICAgICAgIFNQQUNFLkxPRygnTmV4dDogJyArIEBjdXJyZW50LmRhdGEudGl0bGUpXG4gICAgICBlbHNlXG4gICAgICAgIFNQQUNFLkxPRygnanVrZWJveGlzc3RvcHBlZCcpXG5cbiAgbGlzdDogLT5cbiAgICBsaXN0ID0gW11cbiAgICBmb3IgdHJhY2sgaW4gQHBsYXlsaXN0XG4gICAgICBsaXN0LnB1c2goe3RpdGxlOiB0cmFjay5kYXRhLnRpdGxlLCBwZW5kaW5nRHVyYXRpb246IHRyYWNrLnBlbmRpbmdEdXJhdGlvbn0pXG4gICAgcmV0dXJuIGxpc3RcblxuICBhZGQ6IChzb3VuZE9yUGxheWxpc3QpLT5cbiAgICBAU0MuZ2V0U291bmRPclBsYXlsaXN0IHNvdW5kT3JQbGF5bGlzdCwgKG8pPT5cbiAgICAgIHRyYWNrcyA9IG51bGxcbiAgICAgIGlmIG8uaGFzT3duUHJvcGVydHkoJ3RyYWNrcycpXG4gICAgICAgIHRyYWNrcyA9IF9Db2ZmZWUuc2h1ZmZsZShvLnRyYWNrcylcbiAgICAgIGVsc2VcbiAgICAgICAgdHJhY2tzID0gW11cbiAgICAgICAgdHJhY2tzLnB1c2gobylcblxuICAgICAgZm9yIGRhdGEgaW4gdHJhY2tzXG4gICAgICAgIHRyYWNrID0gbmV3IFNQQUNFLlRyYWNrKGRhdGEpXG4gICAgICAgIF9ILnRyaWdnZXIoSlVLRUJPWC5UUkFDS19PTl9BREQsIHsgdHJhY2s6IHRyYWNrIH0pXG5cbiAgX2NhbGNQZW5kaW5nOiAocG9zaXRpb24pLT5cbiAgICBkdXJhdGlvbiA9IDBcbiAgICBmb3IgdHJhY2ssIGkgaW4gQHBsYXlsaXN0XG4gICAgICBkdXJhdGlvbiArPSB0cmFjay5kYXRhLmR1cmF0aW9uXG4gICAgICBicmVhayBpZiBpID09IHBvc2l0aW9uXG4gICAgcmV0dXJuIGR1cmF0aW9uXG5cbiAgdXBkYXRlOiAoZGVsdGEpLT5cbiAgICBmb3IgdHJhY2ssIGkgaW4gQHBsYXlsaXN0XG4gICAgICB0cmFjay51cGRhdGUoZGVsdGEpXG5cbiAgICBpZiBAcGxheWxpc3QubGVuZ3RoID4gMFxuICAgICAgQG5leHQoKSBpZiBAY3VycmVudCA9PSBudWxsXG5cbiAgbmV4dDogKHRyYWNrKS0+XG4gICAgQF9vbmZpbmlzaCgpIGlmIEBjdXJyZW50XG4gICAgQGN1cnJlbnQgPSBAcGxheWxpc3Quc2hpZnQoKVxuICAgICMgQGN1cnJlbnQuc3BhY2VzaGlwLnBhcmVudC5yZW1vdmVDaGlsZChAY3VycmVudC5zcGFjZXNoaXApXG5cbiAgICBAU0Muc3RyZWFtU291bmQoQGN1cnJlbnQuZGF0YSwgQF9zdGFydGluZywge1xuICAgICAgb25wbGF5ICAgICAgIDogQF9vbnBsYXlcbiAgICAgIG9uZmluaXNoICAgICA6IEBfb25maW5pc2hcbiAgICAgIG9uc3RvcCAgICAgICA6IEBfb25zdG9wXG4gICAgICB3aGlsZXBsYXlpbmcgOiBAd2hpbGVwbGF5aW5nXG4gICAgfSlcblxuICBfc3RhcnRpbmc6IChzb3VuZCk9PlxuICAgIEBjdXJyZW50LnNvdW5kID0gc291bmRcbiAgICBzb3VuZC5tdXRlKClcblxuICBfb25wbGF5OiA9PlxuICAgIF9ILnRyaWdnZXIoSlVLRUJPWC5JU19QTEFZSU5HKVxuICAgIEBzZXRTdGF0ZShTUEFDRS5KdWtlYm94LklTX1BMQVlJTkcpXG5cbiAgX29uZmluaXNoOiA9PlxuICAgIEBjdXJyZW50LnNvdW5kLnN0b3AoKVxuICAgIEBjdXJyZW50LnNvdW5kLmRlc3RydWN0KClcbiAgICBAY3VycmVudCA9IG51bGxcbiAgICBfSC50cmlnZ2VyKEpVS0VCT1guSVNfU1RPUFBFRClcbiAgICBAc2V0U3RhdGUoU1BBQ0UuSnVrZWJveC5JU19TVE9QUEVEKVxuIl19