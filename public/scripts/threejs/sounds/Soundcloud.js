SPACE.SoundCloud = (function() {
  SoundCloud.prototype.token = null;

  function SoundCloud(id) {
    SC.initialize({
      client_id: id,
      redirect_uri: 'http://spacejukebox.dev/plouf.html'
    });
    if (document.cookie.replace(/(?:(?:^|.*;\s*)soundcloud_connected\s*\=\s*([^;]*).*$)|^.*$/, "$1") !== "true") {
      SC.connect(function() {
        var token;
        return token = SC.accessToken();
      });
    } else {
      this.token = document.cookie.replace(/(?:(?:^|.*;\s*)soundcloud_token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
    }
  }

  SoundCloud.prototype.pathOrUrl = function(path, callback) {
    if (/^\/(playlists|tracks)\/[0-9]+$/.test(path)) {
      return callback(path);
    }
    if (!/^(http|https)/.test(path)) {
      return console.log("\"" + path + "\" is not an url or a path");
    }
    return SC.get('/resolve', {
      url: path
    }, (function(_this) {
      return function(track, error) {
        var url;
        if (error) {
          return console.log(error.message);
        } else {
          url = ['', track.kind + 's', track.id].join('/');
          return callback(url);
        }
      };
    })(this));
  };

  SoundCloud.prototype.streamSound = function(object, callback, events) {
    var path;
    if (events == null) {
      events = {};
    }
    if (object && object.hasOwnProperty('kind')) {
      path = object.uri.replace('https://api.soundcloud.com', '');
      return SC.stream(path, {
        autoPlay: true,
        useWaveformData: true,
        useHTML5audio: true,
        preferFlash: false,
        whileplaying: events.whileplaying,
        onplay: events.onplay,
        onfinish: events.onfinish
      }, callback);
    }
  };

  SoundCloud.prototype.getSoundOrPlaylist = function(path, callback) {
    return this.pathOrUrl(path, (function(_this) {
      return function(path) {
        return _this.get(path, callback);
      };
    })(this));
  };

  SoundCloud.prototype.get = function(path, callback) {
    return SC.get(path, callback);
  };

  SoundCloud.prototype.getSoundUrl = function(path, callback) {
    return this.getSoundOrPlaylist(path, (function(_this) {
      return function(sound) {
        return callback(sound.stream_url + '?oauth_token=' + _this.token);
      };
    })(this));
  };

  return SoundCloud;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRocmVlanMvc291bmRzL1NvdW5kY2xvdWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQVcsQ0FBQztBQUVWLHVCQUFBLEtBQUEsR0FBTyxJQUFQLENBQUE7O0FBRWEsRUFBQSxvQkFBQyxFQUFELEdBQUE7QUFDWCxJQUFBLEVBQUUsQ0FBQyxVQUFILENBQWM7QUFBQSxNQUNaLFNBQUEsRUFBVyxFQURDO0FBQUEsTUFFWixZQUFBLEVBQWMsb0NBRkY7S0FBZCxDQUFBLENBQUE7QUFLQSxJQUFBLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFoQixDQUF3Qiw2REFBeEIsRUFBdUYsSUFBdkYsQ0FBQSxLQUFnRyxNQUFwRztBQUNFLE1BQUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxTQUFBLEdBQUE7QUFDVCxZQUFBLEtBQUE7ZUFBQSxLQUFBLEdBQVEsRUFBRSxDQUFDLFdBQUgsQ0FBQSxFQURDO01BQUEsQ0FBWCxDQUFBLENBREY7S0FBQSxNQUFBO0FBS0UsTUFBQSxJQUFDLENBQUEsS0FBRCxHQUFTLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBaEIsQ0FBd0IseURBQXhCLEVBQW1GLElBQW5GLENBQVQsQ0FMRjtLQU5XO0VBQUEsQ0FGYjs7QUFBQSx1QkFlQSxTQUFBLEdBQVcsU0FBQyxJQUFELEVBQU8sUUFBUCxHQUFBO0FBRVQsSUFBQSxJQUFHLGdDQUFnQyxDQUFDLElBQWpDLENBQXNDLElBQXRDLENBQUg7QUFDRSxhQUFPLFFBQUEsQ0FBUyxJQUFULENBQVAsQ0FERjtLQUFBO0FBR0EsSUFBQSxJQUFBLENBQUEsZUFBc0IsQ0FBQyxJQUFoQixDQUFxQixJQUFyQixDQUFQO0FBQ0UsYUFBTyxPQUFPLENBQUMsR0FBUixDQUFZLElBQUEsR0FBTyxJQUFQLEdBQWMsNEJBQTFCLENBQVAsQ0FERjtLQUhBO1dBTUEsRUFBRSxDQUFDLEdBQUgsQ0FBTyxVQUFQLEVBQW1CO0FBQUEsTUFBRSxHQUFBLEVBQUssSUFBUDtLQUFuQixFQUFrQyxDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQyxLQUFELEVBQVEsS0FBUixHQUFBO0FBQ2hDLFlBQUEsR0FBQTtBQUFBLFFBQUEsSUFBSSxLQUFKO2lCQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBSyxDQUFDLE9BQWxCLEVBREY7U0FBQSxNQUFBO0FBR0UsVUFBQSxHQUFBLEdBQU0sQ0FBQyxFQUFELEVBQUssS0FBSyxDQUFDLElBQU4sR0FBVyxHQUFoQixFQUFxQixLQUFLLENBQUMsRUFBM0IsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxHQUFwQyxDQUFOLENBQUE7aUJBQ0EsUUFBQSxDQUFTLEdBQVQsRUFKRjtTQURnQztNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBUlM7RUFBQSxDQWZYLENBQUE7O0FBQUEsdUJBK0JBLFdBQUEsR0FBYSxTQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE1BQW5CLEdBQUE7QUFDWCxRQUFBLElBQUE7O01BRDhCLFNBQU87S0FDckM7QUFBQSxJQUFBLElBQUcsTUFBQSxJQUFXLE1BQU0sQ0FBQyxjQUFQLENBQXNCLE1BQXRCLENBQWQ7QUFDRSxNQUFBLElBQUEsR0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQVgsQ0FBbUIsNEJBQW5CLEVBQWlELEVBQWpELENBQVAsQ0FBQTthQUNBLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixFQUFnQjtBQUFBLFFBQ2QsUUFBQSxFQUFVLElBREk7QUFBQSxRQUdkLGVBQUEsRUFBaUIsSUFISDtBQUFBLFFBS2QsYUFBQSxFQUFlLElBTEQ7QUFBQSxRQU1kLFdBQUEsRUFBYSxLQU5DO0FBQUEsUUFPZCxZQUFBLEVBQWUsTUFBTSxDQUFDLFlBUFI7QUFBQSxRQVFkLE1BQUEsRUFBZSxNQUFNLENBQUMsTUFSUjtBQUFBLFFBU2QsUUFBQSxFQUFlLE1BQU0sQ0FBQyxRQVRSO09BQWhCLEVBVUcsUUFWSCxFQUZGO0tBRFc7RUFBQSxDQS9CYixDQUFBOztBQUFBLHVCQThDQSxrQkFBQSxHQUFvQixTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7V0FDbEIsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFYLEVBQWlCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLElBQUQsR0FBQTtlQUNmLEtBQUMsQ0FBQSxHQUFELENBQUssSUFBTCxFQUFXLFFBQVgsRUFEZTtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCLEVBRGtCO0VBQUEsQ0E5Q3BCLENBQUE7O0FBQUEsdUJBbURBLEdBQUEsR0FBSyxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7V0FDSCxFQUFFLENBQUMsR0FBSCxDQUFPLElBQVAsRUFBYSxRQUFiLEVBREc7RUFBQSxDQW5ETCxDQUFBOztBQUFBLHVCQXNEQSxXQUFBLEdBQWEsU0FBQyxJQUFELEVBQU8sUUFBUCxHQUFBO1dBQ1gsSUFBQyxDQUFBLGtCQUFELENBQW9CLElBQXBCLEVBQTBCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLEtBQUQsR0FBQTtlQUN4QixRQUFBLENBQVMsS0FBSyxDQUFDLFVBQU4sR0FBaUIsZUFBakIsR0FBaUMsS0FBQyxDQUFBLEtBQTNDLEVBRHdCO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBMUIsRUFEVztFQUFBLENBdERiLENBQUE7O29CQUFBOztJQUZGLENBQUEiLCJmaWxlIjoidGhyZWVqcy9zb3VuZHMvU291bmRjbG91ZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNQQUNFLlNvdW5kQ2xvdWRcblxuICB0b2tlbjogbnVsbFxuXG4gIGNvbnN0cnVjdG9yOiAoaWQpLT5cbiAgICBTQy5pbml0aWFsaXplKHtcbiAgICAgIGNsaWVudF9pZDogaWRcbiAgICAgIHJlZGlyZWN0X3VyaTogJ2h0dHA6Ly9zcGFjZWp1a2Vib3guZGV2L3Bsb3VmLmh0bWwnXG4gICAgfSlcblxuICAgIGlmIChkb2N1bWVudC5jb29raWUucmVwbGFjZSgvKD86KD86XnwuKjtcXHMqKXNvdW5kY2xvdWRfY29ubmVjdGVkXFxzKlxcPVxccyooW147XSopLiokKXxeLiokLywgXCIkMVwiKSAhPSBcInRydWVcIilcbiAgICAgIFNDLmNvbm5lY3QoLT5cbiAgICAgICAgdG9rZW4gPSBTQy5hY2Nlc3NUb2tlbigpXG4gICAgICApXG4gICAgZWxzZVxuICAgICAgQHRva2VuID0gZG9jdW1lbnQuY29va2llLnJlcGxhY2UoLyg/Oig/Ol58Lio7XFxzKilzb3VuZGNsb3VkX3Rva2VuXFxzKlxcPVxccyooW147XSopLiokKXxeLiokLywgXCIkMVwiKVxuXG4gIHBhdGhPclVybDogKHBhdGgsIGNhbGxiYWNrKS0+XG4gICAgIyBWZXJpZnkgaWYgaXQncyBhbiBJRCBvciBhbiBVUkxcbiAgICBpZiAvXlxcLyhwbGF5bGlzdHN8dHJhY2tzKVxcL1swLTldKyQvLnRlc3QocGF0aClcbiAgICAgIHJldHVybiBjYWxsYmFjayhwYXRoKVxuXG4gICAgdW5sZXNzIC9eKGh0dHB8aHR0cHMpLy50ZXN0KHBhdGgpXG4gICAgICByZXR1cm4gY29uc29sZS5sb2cgXCJcXFwiXCIgKyBwYXRoICsgXCJcXFwiIGlzIG5vdCBhbiB1cmwgb3IgYSBwYXRoXCJcblxuICAgIFNDLmdldCgnL3Jlc29sdmUnLCB7IHVybDogcGF0aCB9LCAodHJhY2ssIGVycm9yKT0+XG4gICAgICBpZiAoZXJyb3IpXG4gICAgICAgIGNvbnNvbGUubG9nIGVycm9yLm1lc3NhZ2VcbiAgICAgIGVsc2VcbiAgICAgICAgdXJsID0gWycnLCB0cmFjay5raW5kKydzJywgdHJhY2suaWRdLmpvaW4oJy8nKVxuICAgICAgICBjYWxsYmFjayh1cmwpXG4gICAgKVxuXG4gIHN0cmVhbVNvdW5kOiAob2JqZWN0LCBjYWxsYmFjaywgZXZlbnRzPXt9KS0+XG4gICAgaWYgb2JqZWN0IGFuZCBvYmplY3QuaGFzT3duUHJvcGVydHkoJ2tpbmQnKVxuICAgICAgcGF0aCA9IG9iamVjdC51cmkucmVwbGFjZSgnaHR0cHM6Ly9hcGkuc291bmRjbG91ZC5jb20nLCAnJylcbiAgICAgIFNDLnN0cmVhbShwYXRoLCB7XG4gICAgICAgIGF1dG9QbGF5OiB0cnVlXG4gICAgICAgICMgdXNlRVFEYXRhOiB0cnVlXG4gICAgICAgIHVzZVdhdmVmb3JtRGF0YTogdHJ1ZVxuICAgICAgICAjIHVzZVBlYWtEYXRhOiB0cnVlXG4gICAgICAgIHVzZUhUTUw1YXVkaW86IHRydWVcbiAgICAgICAgcHJlZmVyRmxhc2g6IGZhbHNlXG4gICAgICAgIHdoaWxlcGxheWluZyA6IGV2ZW50cy53aGlsZXBsYXlpbmdcbiAgICAgICAgb25wbGF5ICAgICAgIDogZXZlbnRzLm9ucGxheVxuICAgICAgICBvbmZpbmlzaCAgICAgOiBldmVudHMub25maW5pc2hcbiAgICAgIH0sIGNhbGxiYWNrKVxuXG4gIGdldFNvdW5kT3JQbGF5bGlzdDogKHBhdGgsIGNhbGxiYWNrKS0+XG4gICAgQHBhdGhPclVybChwYXRoLCAocGF0aCk9PlxuICAgICAgQGdldChwYXRoLCBjYWxsYmFjaylcbiAgICApXG5cbiAgZ2V0OiAocGF0aCwgY2FsbGJhY2spLT5cbiAgICBTQy5nZXQocGF0aCwgY2FsbGJhY2spXG5cbiAgZ2V0U291bmRVcmw6IChwYXRoLCBjYWxsYmFjayktPlxuICAgIEBnZXRTb3VuZE9yUGxheWxpc3QocGF0aCwgKHNvdW5kKT0+XG4gICAgICBjYWxsYmFjayhzb3VuZC5zdHJlYW1fdXJsKyc/b2F1dGhfdG9rZW49JytAdG9rZW4pXG4gICAgKVxuIl19