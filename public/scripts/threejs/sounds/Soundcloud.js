SPACE.SoundCloud = (function() {
  SoundCloud.prototype.token = null;

  function SoundCloud(id, redirect_uri) {
    SC.initialize({
      client_id: id,
      redirect_uri: redirect_uri
    });
    if (document.cookie.replace(/(?:(?:^|.*;\s*)soundcloud_connected\s*\=\s*([^;]*).*$)|^.*$/, "$1") !== "true") {
      SC.connect(function() {
        var token;
        return token = SC.accessToken();
      });
    } else {
      this.token = document.cookie.replace(/(?:(?:^|.*;\s*)soundcloud_token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
    }
  }

  SoundCloud.prototype.pathOrUrl = function(path, callback) {
    if (/^\/(playlists|tracks)\/[0-9]+$/.test(path)) {
      return callback(path);
    }
    if (!/^(http|https)/.test(path)) {
      return console.log("\"" + path + "\" is not an url or a path");
    }
    return SC.get('/resolve', {
      url: path
    }, (function(_this) {
      return function(track, error) {
        var url;
        if (error) {
          return console.log(error.message);
        } else {
          url = ['', track.kind + 's', track.id].join('/');
          return callback(url);
        }
      };
    })(this));
  };

  SoundCloud.prototype.streamSound = function(object, callback, events) {
    var path;
    if (events == null) {
      events = {};
    }
    if (object && object.hasOwnProperty('kind')) {
      path = object.uri.replace('https://api.soundcloud.com', '');
      return SC.stream(path, {
        autoPlay: true,
        useWaveformData: true,
        useHTML5audio: true,
        preferFlash: false,
        whileplaying: events.whileplaying,
        onplay: events.onplay,
        onfinish: events.onfinish
      }, callback);
    }
  };

  SoundCloud.prototype.getSoundOrPlaylist = function(path, callback) {
    return this.pathOrUrl(path, (function(_this) {
      return function(path) {
        return _this.get(path, callback);
      };
    })(this));
  };

  SoundCloud.prototype.get = function(path, callback) {
    return SC.get(path, callback);
  };

  SoundCloud.prototype.getSoundUrl = function(path, callback) {
    return this.getSoundOrPlaylist(path, (function(_this) {
      return function(sound) {
        return callback(sound.stream_url + '?oauth_token=' + _this.token);
      };
    })(this));
  };

  return SoundCloud;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRocmVlanMvc291bmRzL1NvdW5kY2xvdWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQVcsQ0FBQztBQUVWLHVCQUFBLEtBQUEsR0FBTyxJQUFQLENBQUE7O0FBRWEsRUFBQSxvQkFBQyxFQUFELEVBQUssWUFBTCxHQUFBO0FBQ1gsSUFBQSxFQUFFLENBQUMsVUFBSCxDQUFjO0FBQUEsTUFDWixTQUFBLEVBQVcsRUFEQztBQUFBLE1BRVosWUFBQSxFQUFjLFlBRkY7S0FBZCxDQUFBLENBQUE7QUFLQSxJQUFBLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFoQixDQUF3Qiw2REFBeEIsRUFBdUYsSUFBdkYsQ0FBQSxLQUFnRyxNQUFwRztBQUNFLE1BQUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxTQUFBLEdBQUE7QUFDVCxZQUFBLEtBQUE7ZUFBQSxLQUFBLEdBQVEsRUFBRSxDQUFDLFdBQUgsQ0FBQSxFQURDO01BQUEsQ0FBWCxDQUFBLENBREY7S0FBQSxNQUFBO0FBS0UsTUFBQSxJQUFDLENBQUEsS0FBRCxHQUFTLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBaEIsQ0FBd0IseURBQXhCLEVBQW1GLElBQW5GLENBQVQsQ0FMRjtLQU5XO0VBQUEsQ0FGYjs7QUFBQSx1QkFlQSxTQUFBLEdBQVcsU0FBQyxJQUFELEVBQU8sUUFBUCxHQUFBO0FBRVQsSUFBQSxJQUFHLGdDQUFnQyxDQUFDLElBQWpDLENBQXNDLElBQXRDLENBQUg7QUFDRSxhQUFPLFFBQUEsQ0FBUyxJQUFULENBQVAsQ0FERjtLQUFBO0FBR0EsSUFBQSxJQUFBLENBQUEsZUFBc0IsQ0FBQyxJQUFoQixDQUFxQixJQUFyQixDQUFQO0FBQ0UsYUFBTyxPQUFPLENBQUMsR0FBUixDQUFZLElBQUEsR0FBTyxJQUFQLEdBQWMsNEJBQTFCLENBQVAsQ0FERjtLQUhBO1dBTUEsRUFBRSxDQUFDLEdBQUgsQ0FBTyxVQUFQLEVBQW1CO0FBQUEsTUFBRSxHQUFBLEVBQUssSUFBUDtLQUFuQixFQUFrQyxDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQyxLQUFELEVBQVEsS0FBUixHQUFBO0FBQ2hDLFlBQUEsR0FBQTtBQUFBLFFBQUEsSUFBSSxLQUFKO2lCQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBSyxDQUFDLE9BQWxCLEVBREY7U0FBQSxNQUFBO0FBR0UsVUFBQSxHQUFBLEdBQU0sQ0FBQyxFQUFELEVBQUssS0FBSyxDQUFDLElBQU4sR0FBVyxHQUFoQixFQUFxQixLQUFLLENBQUMsRUFBM0IsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxHQUFwQyxDQUFOLENBQUE7aUJBQ0EsUUFBQSxDQUFTLEdBQVQsRUFKRjtTQURnQztNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBUlM7RUFBQSxDQWZYLENBQUE7O0FBQUEsdUJBK0JBLFdBQUEsR0FBYSxTQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE1BQW5CLEdBQUE7QUFDWCxRQUFBLElBQUE7O01BRDhCLFNBQU87S0FDckM7QUFBQSxJQUFBLElBQUcsTUFBQSxJQUFXLE1BQU0sQ0FBQyxjQUFQLENBQXNCLE1BQXRCLENBQWQ7QUFDRSxNQUFBLElBQUEsR0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQVgsQ0FBbUIsNEJBQW5CLEVBQWlELEVBQWpELENBQVAsQ0FBQTthQUNBLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixFQUFnQjtBQUFBLFFBQ2QsUUFBQSxFQUFVLElBREk7QUFBQSxRQUdkLGVBQUEsRUFBaUIsSUFISDtBQUFBLFFBS2QsYUFBQSxFQUFlLElBTEQ7QUFBQSxRQU1kLFdBQUEsRUFBYSxLQU5DO0FBQUEsUUFPZCxZQUFBLEVBQWUsTUFBTSxDQUFDLFlBUFI7QUFBQSxRQVFkLE1BQUEsRUFBZSxNQUFNLENBQUMsTUFSUjtBQUFBLFFBU2QsUUFBQSxFQUFlLE1BQU0sQ0FBQyxRQVRSO09BQWhCLEVBVUcsUUFWSCxFQUZGO0tBRFc7RUFBQSxDQS9CYixDQUFBOztBQUFBLHVCQThDQSxrQkFBQSxHQUFvQixTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7V0FDbEIsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFYLEVBQWlCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLElBQUQsR0FBQTtlQUNmLEtBQUMsQ0FBQSxHQUFELENBQUssSUFBTCxFQUFXLFFBQVgsRUFEZTtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCLEVBRGtCO0VBQUEsQ0E5Q3BCLENBQUE7O0FBQUEsdUJBbURBLEdBQUEsR0FBSyxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7V0FDSCxFQUFFLENBQUMsR0FBSCxDQUFPLElBQVAsRUFBYSxRQUFiLEVBREc7RUFBQSxDQW5ETCxDQUFBOztBQUFBLHVCQXNEQSxXQUFBLEdBQWEsU0FBQyxJQUFELEVBQU8sUUFBUCxHQUFBO1dBQ1gsSUFBQyxDQUFBLGtCQUFELENBQW9CLElBQXBCLEVBQTBCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLEtBQUQsR0FBQTtlQUN4QixRQUFBLENBQVMsS0FBSyxDQUFDLFVBQU4sR0FBaUIsZUFBakIsR0FBaUMsS0FBQyxDQUFBLEtBQTNDLEVBRHdCO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBMUIsRUFEVztFQUFBLENBdERiLENBQUE7O29CQUFBOztJQUZGLENBQUEiLCJmaWxlIjoidGhyZWVqcy9zb3VuZHMvU291bmRjbG91ZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNQQUNFLlNvdW5kQ2xvdWRcblxuICB0b2tlbjogbnVsbFxuXG4gIGNvbnN0cnVjdG9yOiAoaWQsIHJlZGlyZWN0X3VyaSktPlxuICAgIFNDLmluaXRpYWxpemUoe1xuICAgICAgY2xpZW50X2lkOiBpZFxuICAgICAgcmVkaXJlY3RfdXJpOiByZWRpcmVjdF91cmlcbiAgICB9KVxuXG4gICAgaWYgKGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKC8oPzooPzpefC4qO1xccyopc291bmRjbG91ZF9jb25uZWN0ZWRcXHMqXFw9XFxzKihbXjtdKikuKiQpfF4uKiQvLCBcIiQxXCIpICE9IFwidHJ1ZVwiKVxuICAgICAgU0MuY29ubmVjdCgtPlxuICAgICAgICB0b2tlbiA9IFNDLmFjY2Vzc1Rva2VuKClcbiAgICAgIClcbiAgICBlbHNlXG4gICAgICBAdG9rZW4gPSBkb2N1bWVudC5jb29raWUucmVwbGFjZSgvKD86KD86XnwuKjtcXHMqKXNvdW5kY2xvdWRfdG9rZW5cXHMqXFw9XFxzKihbXjtdKikuKiQpfF4uKiQvLCBcIiQxXCIpXG5cbiAgcGF0aE9yVXJsOiAocGF0aCwgY2FsbGJhY2spLT5cbiAgICAjIFZlcmlmeSBpZiBpdCdzIGFuIElEIG9yIGFuIFVSTFxuICAgIGlmIC9eXFwvKHBsYXlsaXN0c3x0cmFja3MpXFwvWzAtOV0rJC8udGVzdChwYXRoKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHBhdGgpXG5cbiAgICB1bmxlc3MgL14oaHR0cHxodHRwcykvLnRlc3QocGF0aClcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyBcIlxcXCJcIiArIHBhdGggKyBcIlxcXCIgaXMgbm90IGFuIHVybCBvciBhIHBhdGhcIlxuXG4gICAgU0MuZ2V0KCcvcmVzb2x2ZScsIHsgdXJsOiBwYXRoIH0sICh0cmFjaywgZXJyb3IpPT5cbiAgICAgIGlmIChlcnJvcilcbiAgICAgICAgY29uc29sZS5sb2cgZXJyb3IubWVzc2FnZVxuICAgICAgZWxzZVxuICAgICAgICB1cmwgPSBbJycsIHRyYWNrLmtpbmQrJ3MnLCB0cmFjay5pZF0uam9pbignLycpXG4gICAgICAgIGNhbGxiYWNrKHVybClcbiAgICApXG5cbiAgc3RyZWFtU291bmQ6IChvYmplY3QsIGNhbGxiYWNrLCBldmVudHM9e30pLT5cbiAgICBpZiBvYmplY3QgYW5kIG9iamVjdC5oYXNPd25Qcm9wZXJ0eSgna2luZCcpXG4gICAgICBwYXRoID0gb2JqZWN0LnVyaS5yZXBsYWNlKCdodHRwczovL2FwaS5zb3VuZGNsb3VkLmNvbScsICcnKVxuICAgICAgU0Muc3RyZWFtKHBhdGgsIHtcbiAgICAgICAgYXV0b1BsYXk6IHRydWVcbiAgICAgICAgIyB1c2VFUURhdGE6IHRydWVcbiAgICAgICAgdXNlV2F2ZWZvcm1EYXRhOiB0cnVlXG4gICAgICAgICMgdXNlUGVha0RhdGE6IHRydWVcbiAgICAgICAgdXNlSFRNTDVhdWRpbzogdHJ1ZVxuICAgICAgICBwcmVmZXJGbGFzaDogZmFsc2VcbiAgICAgICAgd2hpbGVwbGF5aW5nIDogZXZlbnRzLndoaWxlcGxheWluZ1xuICAgICAgICBvbnBsYXkgICAgICAgOiBldmVudHMub25wbGF5XG4gICAgICAgIG9uZmluaXNoICAgICA6IGV2ZW50cy5vbmZpbmlzaFxuICAgICAgfSwgY2FsbGJhY2spXG5cbiAgZ2V0U291bmRPclBsYXlsaXN0OiAocGF0aCwgY2FsbGJhY2spLT5cbiAgICBAcGF0aE9yVXJsKHBhdGgsIChwYXRoKT0+XG4gICAgICBAZ2V0KHBhdGgsIGNhbGxiYWNrKVxuICAgIClcblxuICBnZXQ6IChwYXRoLCBjYWxsYmFjayktPlxuICAgIFNDLmdldChwYXRoLCBjYWxsYmFjaylcblxuICBnZXRTb3VuZFVybDogKHBhdGgsIGNhbGxiYWNrKS0+XG4gICAgQGdldFNvdW5kT3JQbGF5bGlzdChwYXRoLCAoc291bmQpPT5cbiAgICAgIGNhbGxiYWNrKHNvdW5kLnN0cmVhbV91cmwrJz9vYXV0aF90b2tlbj0nK0B0b2tlbilcbiAgICApXG4iXX0=