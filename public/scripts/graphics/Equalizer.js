var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Equalizer = (function(_super) {
  __extends(Equalizer, _super);

  Equalizer.prototype.center = null;

  Equalizer.prototype._values = null;

  Equalizer.prototype._newValues = null;

  Equalizer.prototype._oldValues = null;

  Equalizer.prototype._time = 1;

  Equalizer.prototype.material = null;

  Equalizer.prototype.lines = null;

  Equalizer.prototype.isGenerated = false;

  Equalizer.prototype.maxLength = 0;

  Equalizer.prototype.minLength = 0;

  Equalizer.prototype.radius = 0;

  Equalizer.prototype.interpolationTime = 0;

  Equalizer.prototype.color = 0xFFFFFF;

  Equalizer.prototype.lineForceUp = .5;

  Equalizer.prototype.lineForceDown = .5;

  Equalizer.prototype.absolute = false;

  function Equalizer(point, opts) {
    var defaults;
    if (opts == null) {
      opts = {};
    }
    this.random = __bind(this.random, this);
    Equalizer.__super__.constructor.apply(this, arguments);
    defaults = {
      maxLength: 200,
      minLength: 50,
      radius: 250,
      interpolationTime: 150,
      color: 0xDE548E,
      lineForceUp: .5,
      lineForceDown: .5,
      absolute: false
    };
    opts = _Coffee.merge(defaults, opts);
    this.minLength = opts.minLength;
    this.maxLength = opts.maxLength;
    this.radius = opts.radius;
    this.interpolationTime = opts.interpolationTime;
    this.color = opts.color;
    this.lineForceUp = opts.lineForceUp;
    this.lineForceDown = opts.lineForceDown;
    this.absolute = opts.absolute;
    this.center = point;
    this._values = [];
    this._oldValues = [];
    this._newValues = [];
    this.generate();
  }

  Equalizer.prototype.setValues = function(values) {
    var length, newValues, value, _i, _len;
    newValues = [];
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      value = values[_i];
      if (this.absolute) {
        value = Math.abs(value);
      }
      length = this.minLength + parseFloat(value) * (this.maxLength - this.minLength);
      newValues.push(Math.max(length, 0));
    }
    this._newValues = newValues;
    return this.resetInterpolation();
  };

  Equalizer.prototype.generate = function() {
    this.mute();
    this.material = new THREE.LineBasicMaterial({
      color: this.color,
      linewidth: 4
    });
    this.lines = [];
    this.update(0);
    return this.updateGeometries(true);
  };

  Equalizer.prototype.update = function(delta) {
    var diff, i, t, _i, _ref;
    this._time += delta;
    t = this._time / this.interpolationTime;
    if (t > 1) {
      return;
    }
    for (i = _i = 0, _ref = this._newValues.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      diff = this._oldValues[i] - this._newValues[i];
      this._values[i] = this._oldValues[i] - t * diff;
    }
    return this.updateGeometries();
  };

  Equalizer.prototype.updateGeometries = function(create) {
    var angle, from, geometry, i, length, line, radius, to, _i, _ref, _results;
    if (create == null) {
      create = false;
    }
    _results = [];
    for (i = _i = 0, _ref = this._values.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      angle = Math.PI * 2 * i / this._values.length;
      length = this._values[i];
      radius = this.radius;
      from = this.computePosition(this.center, angle, radius - length * this.lineForceDown);
      to = this.computePosition(this.center, angle, radius + length * this.lineForceUp);
      if (typeof this.lines[i] === 'undefined') {
        geometry = new THREE.Geometry();
        geometry.vertices.push(from, to, from);
        line = new THREE.Line(geometry, this.material);
        this.lines.push(line);
        _results.push(this.add(line));
      } else {
        line = this.lines[i];
        line.geometry.vertices[0] = from;
        line.geometry.vertices[1] = to;
        line.geometry.vertices[2] = from;
        _results.push(line.geometry.verticesNeedUpdate = true);
      }
    }
    return _results;
  };

  Equalizer.prototype.random = function(setValues) {
    var i, values, _i;
    if (setValues == null) {
      setValues = true;
    }
    values = [];
    for (i = _i = 0; _i <= 63; i = ++_i) {
      values[i] = Math.random();
    }
    if (setValues) {
      this.setValues(values);
    }
    return values;
  };

  Equalizer.prototype.mute = function(setValues) {
    var i, values, _i;
    if (setValues == null) {
      setValues = true;
    }
    values = [];
    for (i = _i = 0; _i <= 63; i = ++_i) {
      values[i] = 0;
    }
    if (setValues) {
      return this.setValues(values);
    }
  };

  Equalizer.prototype.resetInterpolation = function() {
    var i, _i, _ref, _ref1, _results;
    this._time = 0;
    this._oldValues = this._values;
    if (this._newValues.length > this._oldValues.length) {
      _results = [];
      for (i = _i = _ref = this._oldValues.length, _ref1 = this._newValues.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this._oldValues[i] = 0);
      }
      return _results;
    }
  };

  Equalizer.prototype.computePosition = function(point, angle, length) {
    var x, y;
    x = point.x + Math.sin(angle) * length;
    y = point.y + Math.cos(angle) * length;
    return new THREE.Vector3(x, y, point.z);
  };

  return Equalizer;

})(THREE.Group);

//# sourceMappingURL=data:application/json;base64,