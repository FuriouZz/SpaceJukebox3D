var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SPACE.Jukebox = (function() {
  Jukebox.prototype.current = null;

  Jukebox.prototype.playlist = null;

  Jukebox.prototype.SC = null;

  function Jukebox() {
    this._onfinish = __bind(this._onfinish, this);
    this._onplay = __bind(this._onplay, this);
    this._starting = __bind(this._starting, this);
    this._eTrackAdded = __bind(this._eTrackAdded, this);
    this.SC = new SPACE.SoundCloud(SPACE.SOUNDCLOUD.id);
    this.playlist = [];
    this._events();
    this._predefinedPlaylist();
  }

  Jukebox.prototype._events = function() {
    return document.addEventListener(JUKEBOX.TRACK_ADDED.type, this._eTrackAdded);
  };

  Jukebox.prototype._eTrackAdded = function(e) {
    var track;
    track = e.object.track;
    track.pendingDuration = this._calcPending(this.playlist.length - 1);
    this.playlist.push(e.object.track);
    return SPACE.LOG('Sound added: ' + e.object.track.data.title);
  };

  Jukebox.prototype._predefinedPlaylist = function() {
    return this.add('https://soundcloud.com/professorkliq/sets/trackmania-stadium-ost');
  };

  Jukebox.prototype.list = function() {
    var list, track, _i, _len, _ref;
    list = [];
    _ref = this.playlist;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      track = _ref[_i];
      list.push({
        title: track.data.title,
        pendingDuration: track.pendingDuration
      });
    }
    return list;
  };

  Jukebox.prototype.add = function(soundOrPlaylist) {
    return this.SC.getSoundOrPlaylist(soundOrPlaylist, (function(_this) {
      return function(o) {
        var data, track, tracks, _i, _len, _results;
        tracks = null;
        if (o.hasOwnProperty('tracks')) {
          tracks = o.tracks;
        } else {
          tracks = [];
          tracks.push(o);
        }
        _results = [];
        for (_i = 0, _len = tracks.length; _i < _len; _i++) {
          data = tracks[_i];
          track = new SPACE.Track(data);
          _results.push(HELPERS.trigger(JUKEBOX.TRACK_ON_ADD, {
            track: track
          }));
        }
        return _results;
      };
    })(this));
  };

  Jukebox.prototype._calcPending = function(position) {
    var duration, i, track, _i, _len, _ref;
    duration = 0;
    _ref = this.playlist;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      track = _ref[i];
      duration += track.data.duration;
      if (i === position) {
        break;
      }
    }
    return duration;
  };

  Jukebox.prototype.update = function(delta) {
    var i, track, _i, _len, _ref;
    _ref = this.playlist;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      track = _ref[i];
      track.update(delta);
    }
    if (this.playlist.length > 0) {
      if (this.current === null) {
        return this.next();
      }
    }
  };

  Jukebox.prototype.next = function(track) {
    if (this.current) {
      this._onfinish();
    }
    this.current = this.playlist.shift();
    this.current.spaceship.parent.removeChild(this.current.spaceship);
    return this.SC.streamSound(this.current.data, this._starting, {
      onplay: this._onplay,
      onfinish: this._onfinish,
      onstop: this._onstop,
      whileplaying: this.whileplaying
    });
  };

  Jukebox.prototype._starting = function(sound) {
    return this.current.sound = sound;
  };

  Jukebox.prototype._onplay = function() {
    SPACE.LOG('Next: ' + this.current.data.title);
    return HELPERS.trigger(JUKEBOX.IS_PLAYING);
  };

  Jukebox.prototype._onfinish = function() {
    SPACE.LOG('jukeboxisstopped');
    this.current.sound.stop();
    this.current.sound.destruct();
    this.current = null;
    this.eq.mute();
    return HELPERS.trigger(JUKEBOX.IS_STOPPED);
  };

  return Jukebox;

})();

//# sourceMappingURL=data:application/json;base64,