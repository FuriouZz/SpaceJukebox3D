var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Equalizer = (function(_super) {
  __extends(Equalizer, _super);

  Equalizer.prototype.center = null;

  Equalizer.prototype._values = null;

  Equalizer.prototype._oldValues = null;

  Equalizer.prototype._newValues = null;

  Equalizer.prototype._time = 1;

  Equalizer.prototype.maxLength = 0;

  Equalizer.prototype.minLength = 0;

  Equalizer.prototype.radius = 0;

  Equalizer.prototype.interpolationTime = 0;

  function Equalizer(point, opts) {
    var defaults;
    if (opts == null) {
      opts = {};
    }
    this.mute = __bind(this.mute, this);
    this.random = __bind(this.random, this);
    Equalizer.__super__.constructor.apply(this, arguments);
    defaults = {
      maxLength: 200,
      minLength: 50,
      radius: 250,
      interpolationTime: 150
    };
    opts = HELPERS.merge(defaults, opts);
    this.minLength = opts.minLength;
    this.maxLength = opts.maxLength;
    this.radius = opts.radius;
    this.interpolationTime = opts.interpolationTime;
    this.center = new PIXI.Point(point.x, point.y);
    this._values = [];
    this._oldValues = [];
    this._newValues = [];
  }

  Equalizer.prototype.setNewValues = function(values) {
    var length, newValues, value, _i, _len;
    newValues = [];
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      value = values[_i];
      length = this.minLength + parseFloat(value) * (this.maxLength - this.minLength);
      newValues.push(length);
    }
    this._newValues = newValues;
    return this.resetTime();
  };

  Equalizer.prototype.random = function() {
    var i, rands, _i;
    rands = [];
    for (i = _i = 0; _i <= 255; i = ++_i) {
      rands[i] = Math.random();
    }
    return this.setNewValues(rands);
  };

  Equalizer.prototype.mute = function() {
    var i, mute, _i;
    mute = [];
    for (i = _i = 0; _i <= 255; i = ++_i) {
      mute[i] = 0;
    }
    return this.setNewValues(mute);
  };

  Equalizer.prototype.update = function(delta) {
    var diff, i, t, _i, _ref, _results;
    this._time += delta;
    t = this._time / this.interpolationTime;
    if (t > 1) {
      return;
    }
    _results = [];
    for (i = _i = 0, _ref = this._newValues.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      diff = this._oldValues[i] - this._newValues[i];
      _results.push(this._values[i] = this._oldValues[i] - t * diff);
    }
    return _results;
  };

  Equalizer.prototype.resetTime = function() {
    var i, _i, _ref, _ref1, _results;
    this._time = 0;
    this._oldValues = this._values;
    if (this._newValues.length > this._oldValues.length) {
      _results = [];
      for (i = _i = _ref = this._oldValues.length, _ref1 = this._newValues.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this._oldValues[i] = 0);
      }
      return _results;
    }
  };

  Equalizer.prototype.calculateLinePoint = function(angle, length) {
    var center, x, y;
    center = HELPERS.retina(this.center);
    x = center.x + Math.cos(angle) * length;
    y = center.y + Math.sin(angle) * length;
    return new PIXI.Point(x, y);
  };

  Equalizer.prototype.draw = function() {
    var angle, from, i, length, radius, to, _i, _ref, _results;
    this.clear();
    this.lineStyle(SPACE.pixelRatio, 0xFFFFFF, .75);
    _results = [];
    for (i = _i = 0, _ref = this._values.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      angle = PIXI.PI_2 * i / this._values.length;
      angle += Math.PI * .5;
      length = this._values[i];
      radius = HELPERS.retina(this.radius);
      from = this.calculateLinePoint(angle, radius - length * .5);
      to = this.calculateLinePoint(angle, radius + length * .5);
      _results.push(this.drawline(from.x, from.y, to.x, to.y));
    }
    return _results;
  };

  Equalizer.prototype.drawline = function(fromX, fromY, toX, toY) {
    this.moveTo(fromX, fromY);
    return this.lineTo(toX, toY);
  };

  return Equalizer;

})(PIXI.Graphics);

//# sourceMappingURL=data:application/json;base64,