SPACE.SoundCloud = (function() {
  SoundCloud.prototype.token = null;

  function SoundCloud(id, redirect_uri) {
    SC.initialize({
      client_id: id,
      redirect_uri: redirect_uri
    });
    if (document.cookie.replace(/(?:(?:^|.*;\s*)soundcloud_connected\s*\=\s*([^;]*).*$)|^.*$/, "$1") !== "true") {
      SC.connect(function() {
        var token;
        return token = SC.accessToken();
      });
    } else {
      this.token = document.cookie.replace(/(?:(?:^|.*;\s*)soundcloud_token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
    }
  }

  SoundCloud.prototype.pathOrUrl = function(path, callback) {
    if (/^\/(playlists|tracks)\/[0-9]+$/.test(path)) {
      return callback(path);
    }
    if (!/^(http|https)/.test(path)) {
      return console.log("\"" + path + "\" is not an url or a path");
    }
    return SC.get('/resolve', {
      url: path
    }, (function(_this) {
      return function(track, error) {
        var url;
        if (error) {
          return console.log(error.message);
        } else {
          url = ['', track.kind + 's', track.id].join('/');
          return callback(url);
        }
      };
    })(this));
  };

  SoundCloud.prototype.streamSound = function(object, callback, events) {
    var path;
    if (events == null) {
      events = {};
    }
    if (object && object.hasOwnProperty('kind')) {
      path = object.uri.replace('https://api.soundcloud.com', '');
      return SC.stream(path, {
        autoPlay: true,
        useWaveformData: true,
        useHTML5audio: true,
        preferFlash: false,
        whileplaying: events.whileplaying,
        onplay: events.onplay,
        onfinish: events.onfinish
      }, callback);
    }
  };

  SoundCloud.prototype.getSoundOrPlaylist = function(path, callback) {
    return this.pathOrUrl(path, (function(_this) {
      return function(path) {
        return _this.get(path, callback);
      };
    })(this));
  };

  SoundCloud.prototype.get = function(path, callback) {
    return SC.get(path, callback);
  };

  SoundCloud.prototype.getSoundUrl = function(path, callback) {
    return this.getSoundOrPlaylist(path, (function(_this) {
      return function(sound) {
        return callback(sound.stream_url + '?oauth_token=' + _this.token);
      };
    })(this));
  };

  return SoundCloud;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvdW5kcy9Tb3VuZGNsb3VkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxLQUFXLENBQUM7QUFFVix1QkFBQSxLQUFBLEdBQU8sSUFBUCxDQUFBOztBQUVhLEVBQUEsb0JBQUMsRUFBRCxFQUFLLFlBQUwsR0FBQTtBQUNYLElBQUEsRUFBRSxDQUFDLFVBQUgsQ0FBYztBQUFBLE1BQ1osU0FBQSxFQUFXLEVBREM7QUFBQSxNQUVaLFlBQUEsRUFBYyxZQUZGO0tBQWQsQ0FBQSxDQUFBO0FBS0EsSUFBQSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBaEIsQ0FBd0IsNkRBQXhCLEVBQXVGLElBQXZGLENBQUEsS0FBZ0csTUFBcEc7QUFDRSxNQUFBLEVBQUUsQ0FBQyxPQUFILENBQVcsU0FBQSxHQUFBO0FBQ1QsWUFBQSxLQUFBO2VBQUEsS0FBQSxHQUFRLEVBQUUsQ0FBQyxXQUFILENBQUEsRUFEQztNQUFBLENBQVgsQ0FBQSxDQURGO0tBQUEsTUFBQTtBQUtFLE1BQUEsSUFBQyxDQUFBLEtBQUQsR0FBUyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQWhCLENBQXdCLHlEQUF4QixFQUFtRixJQUFuRixDQUFULENBTEY7S0FOVztFQUFBLENBRmI7O0FBQUEsdUJBZUEsU0FBQSxHQUFXLFNBQUMsSUFBRCxFQUFPLFFBQVAsR0FBQTtBQUVULElBQUEsSUFBRyxnQ0FBZ0MsQ0FBQyxJQUFqQyxDQUFzQyxJQUF0QyxDQUFIO0FBQ0UsYUFBTyxRQUFBLENBQVMsSUFBVCxDQUFQLENBREY7S0FBQTtBQUdBLElBQUEsSUFBQSxDQUFBLGVBQXNCLENBQUMsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBUDtBQUNFLGFBQU8sT0FBTyxDQUFDLEdBQVIsQ0FBWSxJQUFBLEdBQU8sSUFBUCxHQUFjLDRCQUExQixDQUFQLENBREY7S0FIQTtXQU1BLEVBQUUsQ0FBQyxHQUFILENBQU8sVUFBUCxFQUFtQjtBQUFBLE1BQUUsR0FBQSxFQUFLLElBQVA7S0FBbkIsRUFBa0MsQ0FBQSxTQUFBLEtBQUEsR0FBQTthQUFBLFNBQUMsS0FBRCxFQUFRLEtBQVIsR0FBQTtBQUNoQyxZQUFBLEdBQUE7QUFBQSxRQUFBLElBQUksS0FBSjtpQkFDRSxPQUFPLENBQUMsR0FBUixDQUFZLEtBQUssQ0FBQyxPQUFsQixFQURGO1NBQUEsTUFBQTtBQUdFLFVBQUEsR0FBQSxHQUFNLENBQUMsRUFBRCxFQUFLLEtBQUssQ0FBQyxJQUFOLEdBQVcsR0FBaEIsRUFBcUIsS0FBSyxDQUFDLEVBQTNCLENBQThCLENBQUMsSUFBL0IsQ0FBb0MsR0FBcEMsQ0FBTixDQUFBO2lCQUNBLFFBQUEsQ0FBUyxHQUFULEVBSkY7U0FEZ0M7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQyxFQVJTO0VBQUEsQ0FmWCxDQUFBOztBQUFBLHVCQStCQSxXQUFBLEdBQWEsU0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixNQUFuQixHQUFBO0FBQ1gsUUFBQSxJQUFBOztNQUQ4QixTQUFPO0tBQ3JDO0FBQUEsSUFBQSxJQUFHLE1BQUEsSUFBVyxNQUFNLENBQUMsY0FBUCxDQUFzQixNQUF0QixDQUFkO0FBQ0UsTUFBQSxJQUFBLEdBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFYLENBQW1CLDRCQUFuQixFQUFpRCxFQUFqRCxDQUFQLENBQUE7YUFDQSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQVYsRUFBZ0I7QUFBQSxRQUNkLFFBQUEsRUFBVSxJQURJO0FBQUEsUUFHZCxlQUFBLEVBQWlCLElBSEg7QUFBQSxRQUtkLGFBQUEsRUFBZSxJQUxEO0FBQUEsUUFNZCxXQUFBLEVBQWEsS0FOQztBQUFBLFFBT2QsWUFBQSxFQUFlLE1BQU0sQ0FBQyxZQVBSO0FBQUEsUUFRZCxNQUFBLEVBQWUsTUFBTSxDQUFDLE1BUlI7QUFBQSxRQVNkLFFBQUEsRUFBZSxNQUFNLENBQUMsUUFUUjtPQUFoQixFQVVHLFFBVkgsRUFGRjtLQURXO0VBQUEsQ0EvQmIsQ0FBQTs7QUFBQSx1QkE4Q0Esa0JBQUEsR0FBb0IsU0FBQyxJQUFELEVBQU8sUUFBUCxHQUFBO1dBQ2xCLElBQUMsQ0FBQSxTQUFELENBQVcsSUFBWCxFQUFpQixDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQyxJQUFELEdBQUE7ZUFDZixLQUFDLENBQUEsR0FBRCxDQUFLLElBQUwsRUFBVyxRQUFYLEVBRGU7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFqQixFQURrQjtFQUFBLENBOUNwQixDQUFBOztBQUFBLHVCQW1EQSxHQUFBLEdBQUssU0FBQyxJQUFELEVBQU8sUUFBUCxHQUFBO1dBQ0gsRUFBRSxDQUFDLEdBQUgsQ0FBTyxJQUFQLEVBQWEsUUFBYixFQURHO0VBQUEsQ0FuREwsQ0FBQTs7QUFBQSx1QkFzREEsV0FBQSxHQUFhLFNBQUMsSUFBRCxFQUFPLFFBQVAsR0FBQTtXQUNYLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixJQUFwQixFQUEwQixDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQyxLQUFELEdBQUE7ZUFDeEIsUUFBQSxDQUFTLEtBQUssQ0FBQyxVQUFOLEdBQWlCLGVBQWpCLEdBQWlDLEtBQUMsQ0FBQSxLQUEzQyxFQUR3QjtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTFCLEVBRFc7RUFBQSxDQXREYixDQUFBOztvQkFBQTs7SUFGRixDQUFBIiwiZmlsZSI6InNvdW5kcy9Tb3VuZGNsb3VkLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU1BBQ0UuU291bmRDbG91ZFxuXG4gIHRva2VuOiBudWxsXG5cbiAgY29uc3RydWN0b3I6IChpZCwgcmVkaXJlY3RfdXJpKS0+XG4gICAgU0MuaW5pdGlhbGl6ZSh7XG4gICAgICBjbGllbnRfaWQ6IGlkXG4gICAgICByZWRpcmVjdF91cmk6IHJlZGlyZWN0X3VyaVxuICAgIH0pXG5cbiAgICBpZiAoZG9jdW1lbnQuY29va2llLnJlcGxhY2UoLyg/Oig/Ol58Lio7XFxzKilzb3VuZGNsb3VkX2Nvbm5lY3RlZFxccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJC8sIFwiJDFcIikgIT0gXCJ0cnVlXCIpXG4gICAgICBTQy5jb25uZWN0KC0+XG4gICAgICAgIHRva2VuID0gU0MuYWNjZXNzVG9rZW4oKVxuICAgICAgKVxuICAgIGVsc2VcbiAgICAgIEB0b2tlbiA9IGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKC8oPzooPzpefC4qO1xccyopc291bmRjbG91ZF90b2tlblxccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJC8sIFwiJDFcIilcblxuICBwYXRoT3JVcmw6IChwYXRoLCBjYWxsYmFjayktPlxuICAgICMgVmVyaWZ5IGlmIGl0J3MgYW4gSUQgb3IgYW4gVVJMXG4gICAgaWYgL15cXC8ocGxheWxpc3RzfHRyYWNrcylcXC9bMC05XSskLy50ZXN0KHBhdGgpXG4gICAgICByZXR1cm4gY2FsbGJhY2socGF0aClcblxuICAgIHVubGVzcyAvXihodHRwfGh0dHBzKS8udGVzdChwYXRoKVxuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nIFwiXFxcIlwiICsgcGF0aCArIFwiXFxcIiBpcyBub3QgYW4gdXJsIG9yIGEgcGF0aFwiXG5cbiAgICBTQy5nZXQoJy9yZXNvbHZlJywgeyB1cmw6IHBhdGggfSwgKHRyYWNrLCBlcnJvcik9PlxuICAgICAgaWYgKGVycm9yKVxuICAgICAgICBjb25zb2xlLmxvZyBlcnJvci5tZXNzYWdlXG4gICAgICBlbHNlXG4gICAgICAgIHVybCA9IFsnJywgdHJhY2sua2luZCsncycsIHRyYWNrLmlkXS5qb2luKCcvJylcbiAgICAgICAgY2FsbGJhY2sodXJsKVxuICAgIClcblxuICBzdHJlYW1Tb3VuZDogKG9iamVjdCwgY2FsbGJhY2ssIGV2ZW50cz17fSktPlxuICAgIGlmIG9iamVjdCBhbmQgb2JqZWN0Lmhhc093blByb3BlcnR5KCdraW5kJylcbiAgICAgIHBhdGggPSBvYmplY3QudXJpLnJlcGxhY2UoJ2h0dHBzOi8vYXBpLnNvdW5kY2xvdWQuY29tJywgJycpXG4gICAgICBTQy5zdHJlYW0ocGF0aCwge1xuICAgICAgICBhdXRvUGxheTogdHJ1ZVxuICAgICAgICAjIHVzZUVRRGF0YTogdHJ1ZVxuICAgICAgICB1c2VXYXZlZm9ybURhdGE6IHRydWVcbiAgICAgICAgIyB1c2VQZWFrRGF0YTogdHJ1ZVxuICAgICAgICB1c2VIVE1MNWF1ZGlvOiB0cnVlXG4gICAgICAgIHByZWZlckZsYXNoOiBmYWxzZVxuICAgICAgICB3aGlsZXBsYXlpbmcgOiBldmVudHMud2hpbGVwbGF5aW5nXG4gICAgICAgIG9ucGxheSAgICAgICA6IGV2ZW50cy5vbnBsYXlcbiAgICAgICAgb25maW5pc2ggICAgIDogZXZlbnRzLm9uZmluaXNoXG4gICAgICB9LCBjYWxsYmFjaylcblxuICBnZXRTb3VuZE9yUGxheWxpc3Q6IChwYXRoLCBjYWxsYmFjayktPlxuICAgIEBwYXRoT3JVcmwocGF0aCwgKHBhdGgpPT5cbiAgICAgIEBnZXQocGF0aCwgY2FsbGJhY2spXG4gICAgKVxuXG4gIGdldDogKHBhdGgsIGNhbGxiYWNrKS0+XG4gICAgU0MuZ2V0KHBhdGgsIGNhbGxiYWNrKVxuXG4gIGdldFNvdW5kVXJsOiAocGF0aCwgY2FsbGJhY2spLT5cbiAgICBAZ2V0U291bmRPclBsYXlsaXN0KHBhdGgsIChzb3VuZCk9PlxuICAgICAgY2FsbGJhY2soc291bmQuc3RyZWFtX3VybCsnP29hdXRoX3Rva2VuPScrQHRva2VuKVxuICAgIClcbiJdfQ==